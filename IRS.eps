%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: model.pdf
%%Creator: (Adobe Acrobat 15.23.0)
%%For: yuxianghao
%%CreationDate: 5/24/19, 11:09 PM
%%BoundingBox: 0 0 910 659
%%HiResBoundingBox: 0 0 910 659
%%CropBox: 0 0 910 659
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 844 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2019-04-14T08:03:12Z"
   xmp:CreatorTool="OmniGraffle 7.0.2"
   xmp:ModifyDate="2019-04-14T08:03:12Z"
   pdf:Producer="macOS Version 10.14.3 (Build 18D109) Quartz PDFContext">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>喻翔昊</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">model</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceRGB] /CSA add_res
/1 
[/DeviceGray] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -659 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 659 li
910 659 li
910 0 li
cp
clp
0 0 mo
910 0 li
910 659 li
0 659 li
0 0 li
false sop
1 1 1 rgb
f
gsave
30 0 mo
909.279 0 li
909.279 659 li
30 659 li
30 0 li
clp
gsave
30 659 mo
909.279 659 li
909.279 0 li
30 0 li
30 659 li
clp
894.593 22.0279 mo
894.593 636.972 li
727.548 494.146 li
727.548 147.851 li
894.593 22.0279 li
cp
.773 .878 .706 rgb
ef
894.593 12.8496 mo
894.593 644.315 li
878.072 644.315 li
878.072 12.8496 li
cp
1 1 1 rgb
f
863.387 12.8496 mo
863.387 644.315 li
850.537 644.315 li
850.537 12.8496 li
cp
f
837.688 14.6852 mo
837.688 646.15 li
830.345 646.15 li
830.345 14.6852 li
cp
f
817.496 12.8496 mo
817.496 644.315 li
808.318 644.315 li
808.318 12.8496 li
cp
f
799.139 12.8496 mo
799.139 644.315 li
791.796 644.315 li
791.796 12.8496 li
cp
f
780.783 12.8496 mo
780.783 644.315 li
775.276 644.315 li
775.276 12.8496 li
cp
f
766.097 12.8496 mo
766.097 644.315 li
760.59 644.315 li
760.59 12.8496 li
cp
f
753.248 12.8496 mo
753.248 644.315 li
747.741 644.315 li
747.741 12.8496 li
cp
f
740.398 12.8496 mo
740.398 644.315 li
736.727 644.315 li
736.727 12.8496 li
cp
f
729.384 12.8496 mo
729.384 644.315 li
725.713 644.315 li
725.713 12.8496 li
cp
f
900.66 65.0216 mo
901.936 14.6856 li
725.154 144.668 li
723.878 168.881 li
900.022 61.8356 li
900.66 65.0216 li
cp
ef
726.405 203.758 mo
898.265 123.695 li
898.265 88.1117 li
723.878 185.966 li
726.405 203.758 li
cp
ef
898.265 185.768 mo
723.878 238.635 li
725.767 219.125 li
897.006 150.524 li
898.265 185.768 li
cp
ef
900.1 249.649 mo
722.042 275.348 li
722.042 256.074 li
898.185 211.1 li
897.547 251.577 li
900.1 249.649 li
cp
ef
898.265 312.061 mo
723.878 310.117 li
723.878 291.977 li
897.631 279.019 li
898.265 312.061 li
cp
ef
899.468 340.562 mo
725.713 326.746 li
725.713 346.842 li
900.1 374.473 li
899.468 340.562 li
cp
ef
899.392 403.018 mo
723.877 361.624 li
723.877 381.694 li
901.936 436.886 li
899.392 403.018 li
cp
ef
898.789 466.614 mo
725.713 400.172 li
725.713 418.977 li
901.936 502.969 li
898.789 466.614 li
cp
ef
899.466 565.382 mo
725.713 452.277 li
725.713 433.215 li
900.1 531.705 li
899.466 565.382 li
cp
ef
898.265 644.315 mo
723.878 497.83 li
723.878 469.928 li
897.631 594.852 li
898.265 644.315 li
cp
ef
4.73498 lw
0 lc
0 lj
8 ml
[] 0 dsh
true sadj
904.689 10.0961 mo
904.689 648.728 li
723.01 498.09 li
723.01 143.646 li
904.689 10.0961 li
cp
0 0 0 rgb
@
152.454 321.077 mo
174.267 318.009 li
173.5 312.556 li
151.687 315.624 li
cp
190.627 315.709 mo
212.44 312.641 li
211.673 307.187 li
189.86 310.255 li
cp
228.8 310.34 mo
250.613 307.272 li
249.847 301.819 li
228.033 304.887 li
cp
266.973 304.971 mo
288.786 301.904 li
288.02 296.45 li
266.206 299.518 li
cp
305.146 299.603 mo
326.96 296.535 li
326.193 291.082 li
304.379 294.149 li
cp
343.32 294.234 mo
365.133 291.166 li
364.366 285.713 li
342.553 288.781 li
cp
381.493 288.866 mo
403.306 285.798 li
402.539 280.345 li
380.727 283.412 li
cp
419.667 283.497 mo
441.479 280.429 li
440.712 274.976 li
418.9 278.044 li
cp
457.84 278.129 mo
479.652 275.061 li
478.885 269.607 li
457.073 272.675 li
cp
496.013 272.76 mo
517.826 269.692 li
517.058 264.239 li
495.245 267.307 li
cp
534.185 267.391 mo
555.998 264.324 li
555.232 258.87 li
533.418 261.938 li
cp
572.358 262.023 mo
594.172 258.955 li
593.404 253.502 li
571.591 256.57 li
cp
610.531 256.654 mo
632.344 253.587 li
631.577 248.133 li
609.764 251.201 li
cp
648.704 251.286 mo
670.517 248.218 li
669.751 242.765 li
647.938 245.832 li
cp
686.877 245.917 mo
708.69 242.849 li
707.923 237.396 li
686.11 240.464 li
cp
725.05 240.549 mo
746.864 237.481 li
746.097 232.028 li
724.283 235.095 li
cp
749.356 242.692 mo
764.566 232.211 li
747.055 226.332 li
cp
.267 .447 .769 rgb
f
154.048 316.569 mo
169.384 332.381 li
165.431 336.215 li
150.094 320.403 li
cp
180.886 344.24 mo
196.223 360.051 li
192.27 363.885 li
176.933 348.074 li
cp
207.727 371.91 mo
223.063 387.722 li
219.111 391.556 li
203.773 375.744 li
cp
234.565 399.58 mo
249.902 415.392 li
245.949 419.226 li
230.613 403.415 li
cp
261.404 427.251 mo
276.741 443.063 li
272.788 446.897 li
257.451 431.085 li
cp
288.245 454.921 mo
303.581 470.733 li
299.628 474.567 li
284.292 458.756 li
cp
315.083 482.592 mo
330.421 498.404 li
326.467 502.238 li
311.13 486.426 li
cp
341.923 510.262 mo
357.259 526.074 li
353.306 529.908 li
337.97 514.097 li
cp
368.762 537.933 mo
384.099 553.744 li
380.146 557.579 li
364.809 541.767 li
cp
395.602 565.603 mo
410.938 581.415 li
406.986 585.249 li
391.648 569.437 li
cp
413.921 576.581 mo
419.495 594.191 li
402.064 588.084 li
cp
.957 .694 .514 rgb
f
787.403 254.29 mo
773.133 271.071 li
777.329 274.639 li
791.598 257.857 li
cp
762.431 283.657 mo
748.162 300.438 li
752.357 304.006 li
766.627 287.224 li
cp
737.46 313.024 mo
723.19 329.805 li
727.385 333.373 li
741.655 316.591 li
cp
712.488 342.391 mo
698.218 359.172 li
702.414 362.74 li
716.683 345.958 li
cp
687.516 371.758 mo
673.247 388.539 li
677.442 392.107 li
691.712 375.325 li
cp
662.545 401.125 mo
648.275 417.906 li
652.471 421.474 li
666.74 404.692 li
cp
637.573 430.492 mo
623.303 447.273 li
627.499 450.841 li
641.768 434.06 li
cp
612.601 459.859 mo
598.332 476.64 li
602.527 480.208 li
616.796 463.427 li
cp
587.63 489.226 mo
573.36 506.007 li
577.555 509.575 li
591.825 492.794 li
cp
562.658 518.593 mo
548.388 535.374 li
552.584 538.942 li
566.853 522.161 li
cp
537.686 547.96 mo
523.417 564.741 li
527.612 568.309 li
541.882 551.528 li
cp
512.715 577.327 mo
500.323 591.9 li
504.518 595.468 li
516.91 580.895 li
cp
497.912 586.234 mo
493.503 604.171 li
510.498 596.937 li
cp
.267 .447 .769 rgb
f
0 0 0 rgb
%ADOBeginSubsetFont: KAAAAA+Calibri Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /KAAAAA+Calibri def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 33 /g1 putdup 34 /g3 putdup 35 /g9 putdup 36 /g8 putdup 37 /g6 putdup 38 /g7 putdup 39 /g2 putdup 40 /g4 putdup 41 /g5 putdef/FontBBox {-503 -312 1240 1026} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings10 dict dup begin/.notdef <1C60D8A8C9B7A086528E2CBE7FD4F03CC1C545DFC3C53F52C692334252531335C4AFD91E9493A7B9787114ADBF50CAD0D8D8F4E0FD112CA0EDC244BC77AFB35E52902467E4B7D65BC23E8AB084EE08EDC3C9FE17948A4E93ECA5D5D8A99AF099DAB98A96A7EEC3487AD5909F63F36A9F52E364FE794F0586CEACB0693AEA3E3B131EDB924E9018AC085D5D058B3A8419D5096479413ADE107D9F5302816818EECEB683CD82FAAA79E358EAA71283CC02664EE09C62BDF6E0D9BC98D9F308DF8AEA61A9B7C090BD7FD96A3223C7AE0D3D1A8F2E623FA6B7C467CA6FECDBA0B792188DFEEBD3D01BCE6CC077D778842DE1B5E36F7F8EB4C68A439269E0981B28AD1790AA058065E4B6AD27A659E12C7322A5BE1E7DF9729C0030192F3688A380035351BB0945D5DC7515959F458727E2B8854977E466D6DDC900E997B52F6BAB4C73A178A3B47EBB3C3FC842F51CC6E114336F3E4E5E72B20D8F94A7BA3BA965E83BF37BAA664C34B8502BB9E9B9BEDD7EBC5DCBC4FFF5EBCA9C032449885D42A9DCCBA2A816B59D7978373DF4208E5608F69A2EAF492AC156CC637D5A11AF573B17CF9F38> |-/g1 <1C60D8A8C9B7F88C2B6CB105045FB5B2B32CEE3D567021E87FFA3A108F22F0AD769D89AF310F9FA2A63D83B348F1CD4D9158D831C2637A040F2E3D2AD1E0C1265C252DE42DC685024335218B88110082607887337A49D14691BEEC919D91764E7A708708CD55D39F5C43F91BAAAD2C1BF631413626FEAC47C21B08151BEA5901545C7204664D0C76E7A812FB56764BAC701D80F5CBA63A3746A10BE794CCB8FEAE9714EDA1C180ECED7E77C8C4917875CE0D099349356F25861C18102A308F1467786491B4C86DDD6D90CF5B29B935592B1FC4BC1C> |-/g3 <1C60D8A8C9B7B6440707B4051A5DBE562555C57029EE089BD9C0449CBA1CDE15C4825E58F476AE98F4F477E10D3D9627118D612BA7F36DE667A502083FA2B5A87FB2329B4599145D540EE26CB50F350F1C24FBA25930C404B0478F3C579C4E768F279D098F515881442D0DB18015E7A9640759CC77EC73BBCCD8C1932872FD5A8725311BE90CFB90EBC81A1F03816E32CEC0A4E1DB1A22099D4FCE02BD53A243FE7B67435108D6337E9414F0B3B9D88A863DF0DD8EDB216F3428E1C8EDADF4A32D7B4C28D91BCF9108C9794A650A0922E44EBCE859C2D94676859E04DBB6727B1AB10957F28903A4930A> |-/g9 <1C60D8A8C9B78E05EAA3CFED1A062DA00ACB6556B6D2C444D52FE211DC3688D13631F07F87D2F0851361DDE2CB13BAE303424A55D9BD107D56D22322818FC76F125ECA1DADD7E1E8164E2DF3A65B67CFAE338C319FC7D07BDCC1CF896B708E125021996E87E6805D1416B537CED172F9478027FB9FD1A978C49E725968E2F5FFC6B56799F9B1D16FFE2085471316923AC7BFBC4E3BBEBA71950AD60EAA4BEA84B8EB89079B6BEAD01C4E2BC5BF11F5FD2CB41D465D8AD649D765F2A952E22AC4EF1DF8297E4E5405180477A9E4F70BB10D787681535F61379438A6888E4F660E2B1CD68547F69ECDD808A3CD50B9FBBDA239A40EE62332FADD878CD5F875BAC27E0BDDA94455E030928A249A166F13D134EF255F5783> |-/g8 <1C60D8A8C9B7347873EC11B675AA6F6B461106EA2C61A0AE571750A082679294B529694EFA74202690239BCD02BDE93B33BD8DE0F0F0056B04093EE6C4E83D6F00E22E61E0A53509E628E3614EF2EF2CA3A8502F22A560E46ED3E4AED0BFD271CCE464114B6332D17C4A046EF74FFF1283283A642C8C06B85A0D72357B5665CD862A8E3D30EFFEE242F88B9C12DF917A74252DB462B499704749747869638F8FD8E70AF4405F95B11DFD154B7101933A31068AA1E65CC021277CCB9EC0EAA7B978A081D1A4252A6693984AAF2CEC4413666DCF8B310A71A67C6E7B1DB954E186EA16C83551DD0516966C156876A3DE36ED7253FFBBC1504668DC98301370300A04E6753189718288CD7EF0ED409765A888272FDB25977C8A74BC113E188B3DF6A69F7851A7E60496291AA0B15532572787EAC7F32F09F1E72589E0E74E0349313472D872E64E7DB78BAB05598FE04B70E52D818F2F7B0B56A5688299352E62F16B011595A7D7701FD641BB2FCFCADB2E33263B8A208C4183E753AD5C25861BF542F2009EA70BB7A67B3BE61085D37469DCDCB97CB2B41A0E2B4DB3BE67C2BA9A1482E51611AB708AAB8BC978B06758006F3287DD3A3CABA09A9F59A21B0D386F88> |-/g6 <1C60D8A8C9B7A9C0DC897A849B356D31E2254DD2E5BDA9320580C3E0839C715C00D9D27B634D4BEEF0FE1F6AD3CCFBCCE9FDE38A84A563FB744619F62FCBF09ACBF7337FE050BE068BCA744FAC4471C4195B7CEC353B3CAECCCEC91AAE22E8955469041D97A8837F9398CE520ABB35C688EEF4229957FD92C79439BF99D24AD4D8B3CAC5B975D966AB01856E8FAEAE3BEB03E1CC76DF299391134BFB02DD61F6D73B2AAAA0D725ABCA9FE504FB3A1EC1E2449C5D921F0DE45A9278013CF0832F39E3771D2B318D27AFF5849066ED5A64AA8E3E404B520DE5F08BE74DD8D58BD1B0FA461EBCBB4DC632B680CFAE62B61DD4FC04FC017D59147CB2E0FBEAAFA402B5BFBD0C4F13F4BD9227D1353527A23B3EF7CA3E7F599CB51DDAF43A567478E4C81011D9D8D5DAD9CB1F948F5FCE67> |-/g7 <1C60D8A8C9B80F37F21112BA81A46E1A1A16E843530DEF66F6901DB9A722A358478F1B0799F6041BFFF7D05EE602307D474F1DB84BF73C4EC1FF13A4D2D5B370042C9A314A700782F944BCE36786AFBD72FA62259FABABA90F1F2BE008B7993D5E1813324C60BD953524A1040FB1A790007846FA5DED6ACE6C7D436FF1C0B97E4BBDDDA28F066E204B37F8321753E1473DDD8EE76C12A0011B04832F5C47D3FF30EE31FE70EF82623D628622FAE52A70984ACD43F9718BC02CE5AA3F5832FAB343FD6D53F2375C811D54E6B415E257D8BB3A2542930D7E0D6DF96FAA0688822B6655966904164F87FA904C272BFAD51FAFF11CA14EBB5F6472235CA20889D111211CF90F83807D99EF12B3B6827C1CA4720D03729BEEEA22A1313C4BDCE878453F5E6DCAD449D1F3B7D54D32C49DA0> |-/g2 <1C60D8A8C9B86ED904793239D5A87846341C6685DE5ABE7704D2C21702B19492F988F7BDB944EF3CF61808A6DB9D1F22BBD335BB859C853102ABDC306BF0344F58C180F59706796F6A9C1DD4450E8611E916B0A530128C4C5E0E96FFF301F980705D57CD45F3B705E62B3216F34902178F51AC490CA8AF3698463F806A35B46CD69D> |-/g4 <1C60D8A8C9B79C5FEE44F314FFC38CE4EF87FC1BC5BA498FDD47672E37A5F29CF58ECF31C007FDE4A3817F15E647D623C8D6D1F4A73D7B6832B4D42989C1A55BCD585ED57C222CC2F78A215F05F4E9A80BA1FCD1DB376BCE47D9921733E44EDE5BEAEC1D2153F2FA8A2E1C22E242D6C1A4BADF7B3C9D6692C8957849B7C757134864A498CBD963474EEA254A542992BCD7D23FC8C03B24B3B32CB8DE36B1F672A455AF821729B85730506FEACB3392B97578F79A301DEE39865FDBFD8731B3029E0DE4CAFE78BFA5CB852575D437DF1324ED582E9AF5A0234A2594A744CBD8A820BF84E58BCFA0173DA6F4633F9CBE6F24B1E9A9AA3FBA2EC97D071CB6D5A774FEB91C9639FD6744C0FCD372B9710A9F8B9537B94D2F3171FFE5B971995351C2AE63C69CA08EAE162057803FEFCA06736258DDA27C02FD926DA3B7BF59E5B7BF6347045A4700726CA8EDCBC532E0E356415CE7BCA89E1BE403BD462A4226BC0587B5B955AD2652D9A4B9A806727D8110> |-/g5 <1C60D8A8C9B770DA42E8D37F1E32882D4AD6464D850106A0DE7A83B47F0EC65143E84B8F9887D8EF560BBB7DAED9582F38B6974AE06071D74243DE04377A9E38C603D44A0AA623BF84EDE575A39EAD4593C4B3F424F5317061A5AEF0FCBD5198E5F9AB43FD8C228E541FA391BADB0ACDBD5FBBD08EBCA2700B6A1105DB45395D242F8C44AC433C3725A9D5F6A91B5DF820F4E2F6E66101242BAA426ABA584BF91A7E8CBD825612324F28F3BB6B5F4B6A98D5678C5683C423898401C97DB6AEBB3B08F0E49015B8C09294559F0324646775C30687BA8725A301A8E7ACA559E180CD1BA525300AD3D8DFA8A8C34309FA6E01CA0BA9F33D60D410C3785C9A35A4D33DC4DA697FAAF83556B3BAF038631153B21CFA05AC7F6B965B6C9DD580ECDAA5E19D631487362428CB6C15F8951776CB9C454AE2ECDA7CED1F00599F60578050870FD9F672ABB02F7641BFFDFC908D98DE75282B9085EDCE585EED996ACD325E186C6CC942676730FDB64EACBC2CC9670AC8631DB84FE5F13182767EAE21F9BC28BA89B244DFD720C9DF35E92F57747BB59E5AF5F4663BAF9B03DC716D74DBD0D4D1BB2703443369B43A50F5B2916833184106C2158995BEF98CEF08C3DF5A6182> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IUFDTM+Calibri /KAAAAA+Calibri findfont ct_VMDictPut/IUFDTM+Calibri*1 [33{/.notdef}rp /g1 /g3 /g9 /g8 /g6 /g7 /g2 /g4 /g5 214{/.notdef}rp]IUFDTM+Calibri nfIUFDTM+Calibri*1 [33.0418 0 0 -33.0418 0 0 ]msf50.8708 458.913 mo(!")[19.0451 0 ]xsh320.062 616.787 mo(#$%&)[17.4393 12.8469 16.5143 0 ]xsh679.854 583.745 mo('\(\))[8.26044 17.4791 0 ]xshgrestore
grestore
gsave
413.491 623.823 mo
415.898 629.627 421.013 633.87 427.155 635.155 cv
431.823 636.085 436.651 635.76 441.149 634.214 cv
462.185 622.673 li
461.458 619.632 460.533 616.641 459.422 613.72 cv
439.907 625.22 li
434.174 627.488 427.761 627.265 422.207 624.605 cv
417.953 622.74 414.746 619.07 413.477 614.613 cv
413.491 623.823 li
eclp
412.078 637.043 mo
463.584 637.043 li
463.584 612.351 li
412.078 612.351 li
cp
gsave
grestore
/-1128235320.0 
<<
/ID /-1128235320.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 36 18 ] 
/XStep 36 
/YStep 18 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
36 0 li
36 18 li
0 18 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 659 ]ct
[36 0 0 -18 0 659 ]ct
snap_to_device
<<
/T 1
/W 36 
/H 18 
/M[36 0 0 -18 0 18 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~J0nZ#3$]7K#D8l%n@3!e*=mrnPKBW3Ot@K/7Uo<*\rAuh9<.&N3@'nb-WR0GdHL_L>q_R=AlC"%Z;iH5
/Z2OXjS"!a>-)>BGl1Ea8#0$s<4Y-TEC$;@kc&_?<ioH)<`gm+F[BqCO>6*&4!g36`aRHaZmu"40$^t3
DHAoP0p?:Y;sff@"&AfE^gL>>qmGFoHDoSf34ri^(t`S2n@"iMHMJ7nk&X\6qfTB0a^+J']M2,DVpoH$
NXYW6$)5)oX:[s'f50_o\[?b=NkZ%![aa.r4r_2g\_ZHC\NPr@As[jd?EYt?,?`19n*qA8"7c*Zl1K7+
I<RItcF6&(~>
/LZWDecode filter
<~J0nZ#3$]7K#D8l%n@3!e*=mrnPKBW3Ot@K/7Uo<*\rAuh9<.&N3@'nb-WR0GdHL_L>q_R=AlC"%Z;iH5
/Z2OXjS"!a>-)>BGl1Ea8#0$s<4Y-TEC$;@kc&_?<ioH)<`gm+F[BqCO>6*&4!g36`aRHaZmu"40$^t3
DHAoP0p?:Y;sff@"&AfE^gL>>qmGFoHDoSf34ri^(t`S2n@"iMHMJ7nk&X\6qfTB0a^+J']M2,DVpoH$
NXYW6$)5)oX:[s'f50_o\[?b=NkZ%![aa.r4r_2g\_ZHC\NPr@As[jd?EYt?,?`19n*qA8"7c*Zl1K7+
I<RItcF6&(~>
/LZWDecode filter
<~J0nZ#3$]7K#D8l%n@3!e*=mrnPKBW3Ot@K/7Uo<*\rAuh9<.&N3@'nb-WR0GdHL_L>q_R=AlC"%Z;iH5
/Z2OXjS"!a>-)>BGl1Ea8#0$s<4Y-TEC$;@kc&_?<ioH)<`gm+F[BqCO>6*&4!g36`aRHaZmu"40$^t3
DHAoP0p?:Y;sff@"&AfE^gL>>qmGFoHDoSf34ri^(t`S2n@"iMHMJ7nk&X\6qfTB0a^+J']M2,DVpoH$
NXYW6$)5)oX:[s'f50_o\[?b=NkZ%![aa.r4r_2g\_ZHC\NPr@As[jd?EYt?,?`19n*qA8"7c*Zl1K7+
I<RItcF6&(~>
/LZWDecode filter
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/-1128235320.0 /Pattern get_res
[1.43072 0 0 1.37179 412.078 637.043 ]make_pattern set_pattern
ef
2 vmreclaim
grestore
413.491 623.823 mo
415.897 629.628 421.014 633.87 427.155 635.155 cv
431.822 636.085 436.65 635.76 441.148 634.215 cv
462.185 622.673 li
461.457 619.633 460.533 616.642 459.421 613.72 cv
439.906 625.22 li
434.174 627.488 427.761 627.265 422.207 624.605 cv
417.954 622.741 414.746 619.07 413.476 614.613 cv
413.491 623.823 li
cp
1 gry
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
gsave
[1.86479 0 0 -1.82594 413.491 623.823 ]ct
@
grestore newpath
gsave
473.732 611.806 mo
492.21 581.138 li
493.943 574.656 491.669 567.776 486.424 563.627 cv
473.999 558.056 li
482.435 561.155 486.763 570.514 483.668 578.967 cv
467.892 606.201 li
471.002 606.252 473.549 608.697 473.732 611.806 cv
eclp
466.493 613.176 mo
494.18 613.176 li
494.18 556.687 li
466.493 556.687 li
cp
gsave
grestore
/-1128235040.0 
<<
/ID /-1128235040.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 19 41 ] 
/XStep 19 
/YStep 41 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
19 0 li
19 41 li
0 41 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 659 ]ct
[19 0 0 -41 0 659 ]ct
snap_to_device
<<
/T 1
/W 19 
/H 41 
/M[19 0 0 -41 0 41 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~J0j,M3$]7FR=mn8:q0,+3tI-8@Sm9FIOu@p7UjL#_MUJuO@Wm/`?^aD-^724MJ6V0>q],*,DrIrenm?G
9Toh*jS"!dSAuAo3[GQ$5tihD<4ZWq?V"@"C/m<c5'467<bk^#V-5jhYZP^B)XS\lB=(iYl`2T$HZ-E!
D>)-C@=rd:?<A`dV'1VD^gL8gbA;0VLW!Y(\4`kI*KS9Nn$All="Tc\@8dTik'&l/bhZG@4XQ@YN2/;<
>.mj%:Qper2Hr>1]0f,*DKeg0Y1lf7D/a_oXmWq\guNK[HsODL^X)+apY,hgLTT1mENZH>kAeDmk/SJ@
2`mMDbhpG]5.==W_<FWSr_C4PUT!YZI6@Hje&VCb4mo$+H(H\lm*-TlZjQZEMlH2m_/J)8U`Y\O%0id:
ln&E.C!m%~>
/LZWDecode filter
<~J0j,M3$]7FR=mn8:q0,+3tI-8@Sm9FIOu@p7UjL#_MUJuO@Wm/`?^aD-^724MJ6V0>q],*,DrIrenm?G
9Toh*jS"!dSAuAo3[GQ$5tihD<4ZWq?V"@"C/m<c5'467<bk^#V-5jhYZP^B)XS\lB=(iYl`2T$HZ-E!
D>)-C@=rd:?<A`dV'1VD^gL8gbA;0VLW!Y(\4`kI*KS9Nn$All="Tc\@8dTik'&l/bhZG@4XQ@YN2/;<
>.mj%:Qper2Hr>1]0f,*DKeg0Y1lf7D/a_oXmWq\guNK[HsODL^X)+apY,hgLTT1mENZH>kAeDmk/SJ@
2`mMDbhpG]5.==W_<FWSr_C4PUT!YZI6@Hje&VCb4mo$+H(H\lm*-TlZjQZEMlH2m_/J)8U`Y\O%0id:
ln&E.C!m%~>
/LZWDecode filter
<~J0j,M3$]7FR=mn8:q0,+3tI-8@Sm9FIOu@p7UjL#_MUJuO@Wm/`?^aD-^724MJ6V0>q],*,DrIrenm?G
9Toh*jS"!dSAuAo3[GQ$5tihD<4ZWq?V"@"C/m<c5'467<bk^#V-5jhYZP^B)XS\lB=(iYl`2T$HZ-E!
D>)-C@=rd:?<A`dV'1VD^gL8gbA;0VLW!Y(\4`kI*KS9Nn$All="Tc\@8dTik'&l/bhZG@4XQ@YN2/;<
>.mj%:Qper2Hr>1]0f,*DKeg0Y1lf7D/a_oXmWq\guNK[HsODL^X)+apY,hgLTT1mENZH>kAeDmk/SJ@
2`mMDbhpG]5.==W_<FWSr_C4PUT!YZI6@Hje&VCb4mo$+H(H\lm*-TlZjQZEMlH2m_/J)8U`Y\O%0id:
ln&E.C!m%~>
/LZWDecode filter
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/-1128235040.0 /Pattern get_res
[1.45722 0 0 1.37778 466.493 613.176 ]make_pattern set_pattern
ef
2 vmreclaim
grestore
473.732 611.806 mo
492.21 581.138 li
493.943 574.656 491.67 567.776 486.424 563.627 cv
473.999 558.056 li
482.435 561.155 486.763 570.514 483.668 578.967 cv
467.892 606.201 li
471.002 606.252 473.549 608.697 473.732 611.806 cv
cp
gsave
[1.86479 0 0 -1.82594 473.732 611.806 ]ct
@
grestore newpath
gsave
472.83 618.239 mo
475.383 613.91 474.696 608.841 471.297 606.92 cv
467.897 604.997 463.071 606.949 460.518 611.279 cv
457.965 615.61 458.652 620.677 462.051 622.599 cv
465.451 624.521 470.277 622.569 472.83 618.239 cv
eclp
453.986 619.621 mo
468.718 627.949 li
479.362 609.898 li
464.63 601.568 li
cp
gsave
grestore
/-1128234760.0 
<<
/ID /-1128234760.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 12 15 ] 
/XStep 12 
/YStep 15 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
12 0 li
12 15 li
0 15 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 659 ]ct
[12 0 0 -15 0 659 ]ct
snap_to_device
<<
/T 1
/W 12 
/H 15 
/M[12 0 0 -15 0 15 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~R@0J2R@0J2R@0J2TqS0RTqS0RTqS0LVP^5fVP^5fVP^,XY-+q1Y-+q1Y,nCf[^NWQ[^NWQ[&g$l]Y(ni
]Y(ni[&g$l`5KU4`5KU.[&g$laiVZHaiVQ:[&g$ldF$@hdEfhH[&g$lg"G'3f?_IN[&g$lhr!>Kf?_IN
[&g$lkND$ef?_IN[&g$lm-Nuqf?_IN[&g$lo^_8*f?_IN[&g$lqXWn0f?_IN[&g$l~>
<~R@0J2R@0J2R@0J2TqS0RTqS0RTqS0LVP^5fVP^5fVP^,XY-+q1Y-+q1Y,nCf[^NWQ[^NWQ[&g$l]Y(ni
]Y(ni[&g$l`5KU4`5KU.[&g$laiVZHaiVQ:[&g$ldF$@hdEfhH[&g$lg"G'3f?_IN[&g$lhr!>Kf?_IN
[&g$lkND$ef?_IN[&g$lm-Nuqf?_IN[&g$lo^_8*f?_IN[&g$lqXWn0f?_IN[&g$l~>
<~R@0J2R@0J2R@0J2TqS0RTqS0RTqS0LVP^5fVP^5fVP^,XY-+q1Y-+q1Y,nCf[^NWQ[^NWQ[&g$l]Y(ni
]Y(ni[&g$l`5KU4`5KU.[&g$laiVZHaiVQ:[&g$ldF$@hdEfhH[&g$lg"G'3f?_IN[&g$lhr!>Kf?_IN
[&g$lkND$ef?_IN[&g$lm-Nuqf?_IN[&g$lo^_8*f?_IN[&g$lqXWn0f?_IN[&g$l~>
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/-1128234760.0 /Pattern get_res
[1.22776 .694077 -.709609 1.20346 453.986 619.621 ]make_pattern set_pattern
ef
2 vmreclaim
grestore
472.83 618.239 mo
475.382 613.91 474.696 608.841 471.297 606.92 cv
467.897 604.997 463.071 606.949 460.518 611.279 cv
457.965 615.61 458.652 620.677 462.051 622.599 cv
465.451 624.52 470.277 622.568 472.83 618.239 cv
cp
gsave
[1.86479 0 0 -1.82594 472.83 618.239 ]ct
@
grestore newpath
gsave
434.654 599.328 mo
428.165 602.412 421.912 605.927 415.938 609.849 cv
414.589 611.122 413.719 612.805 413.477 614.613 cv
414.765 619.074 417.954 622.724 422.207 624.605 cv
427.734 627.266 434.15 627.489 439.907 625.22 cv
459.422 613.72 li
434.654 599.328 li
eclp
412.078 628.144 mo
460.82 628.144 li
460.82 597.958 li
412.078 597.958 li
cp
gsave
grestore
/-1128234480.0 
<<
/ID /-1128234480.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 34 22 ] 
/XStep 34 
/YStep 22 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
34 0 li
34 22 li
0 22 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 659 ]ct
[34 0 0 -22 0 659 ]ct
snap_to_device
<<
/T 1
/W 34 
/H 22 
/M[34 0 0 -22 0 22 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~J1t)%3$]7K#D>C1/2f%;*=mro@Sli('o^1l7Uo<*jE<6m@kq1b3@'nb-^6B^&gh*H>q_R=AlC-_.@ACo
:1mM9jS!jVS$X).3[GQ$8#0!q'8d`/X\YlpC/m1"/qh\g[G)G-j`\=EX&E3hQJIkOB=(hn22`Dj]&'r%
DHAoZY-VZJ\8PH\jnA@j[bb7a9I:PbLVR48c5[dkc]?.XEYt9h0,j%rk&X\<c;Ol,F#k=:bpJcNm*B7M
)CK%&hlk[K2)rieO'M4#DKel.SmQ=&GeDnG4sp#>Xl+/ic]2MqNM58!?E\"bl`JLaD>@I=j7WN~>
/LZWDecode filter
<~J1t)%3$]7K#D>C1/2f%;*=mro@Sli('o^1l7Uo<*jE<6m@kq1b3@'nb-^6B^&gh*H>q_R=AlC-_.@ACo
:1mM9jS!jVS$X).3[GQ$8#0!q'8d`/X\YlpC/m1"/qh\g[G)G-j`\=EX&E3hQJIkOB=(hn22`Dj]&'r%
DHAoZY-VZJ\8PH\jnA@j[bb7a9I:PbLVR48c5[dkc]?.XEYt9h0,j%rk&X\<c;Ol,F#k=:bpJcNm*B7M
)CK%&hlk[K2)rieO'M4#DKel.SmQ=&GeDnG4sp#>Xl+/ic]2MqNM58!?E\"bl`JLaD>@I=j7WN~>
/LZWDecode filter
<~J1t)%3$]7K#D>C1/2f%;*=mro@Sli('o^1l7Uo<*jE<6m@kq1b3@'nb-^6B^&gh*H>q_R=AlC-_.@ACo
:1mM9jS!jVS$X).3[GQ$8#0!q'8d`/X\YlpC/m1"/qh\g[G)G-j`\=EX&E3hQJIkOB=(hn22`Dj]&'r%
DHAoZY-VZJ\8PH\jnA@j[bb7a9I:PbLVR48c5[dkc]?.XEYt9h0,j%rk&X\<c;Ol,F#k=:bpJcNm*B7M
)CK%&hlk[K2)rieO'M4#DKel.SmQ=&GeDnG4sp#>Xl+/ic]2MqNM58!?E\"bl`JLaD>@I=j7WN~>
/LZWDecode filter
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/-1128234480.0 /Pattern get_res
[1.43356 0 0 1.37209 412.078 628.144 ]make_pattern set_pattern
ef
2 vmreclaim
grestore
434.654 599.328 mo
428.166 602.412 421.911 605.927 415.938 609.849 cv
414.588 611.122 413.719 612.805 413.477 614.613 cv
414.766 619.074 417.954 622.724 422.208 624.604 cv
427.735 627.267 434.15 627.489 439.907 625.22 cv
459.422 613.72 li
434.654 599.328 li
cp
0 gry
gsave
[1.86479 0 0 -1.82594 434.654 599.328 ]ct
@
grestore newpath
gsave
440.436 591.836 mo
466.189 606.539 li
467.892 606.201 li
482.523 580.984 li
487.009 573.35 484.477 563.653 476.867 559.327 cv
475.957 558.81 474.996 558.385 473.999 558.056 cv
466.584 557.054 459.202 560.441 455.079 566.737 cv
440.436 591.836 li
eclp
gsave
439.038 607.908 mo
486.139 607.908 li
486.139 556.513 li
439.038 556.513 li
439.038 607.908 li
eclp
gsave
439.038 505.12 mo
486.138 505.12 li
486.138 556.514 li
439.038 556.514 li
439.038 505.12 li
clp
439.038 505.12 mo
486.138 505.12 li
486.138 556.514 li
439.038 556.514 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 659 ]ct
[47.1007 0 0 -51.3941 439.038 153.88 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 33 
/H 37 
/M[33 0 0 -37 0 37 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 33 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 33 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 33 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
S\aI+r5/NNiPPZ3iPP]4_rAT8_8GWXpV[*K_rAT9_8F7P`WEuo`T+r>_8F7_`q%+O_8F74jN%G>_o9[W
a908r`Q.&\"2Vmoa8!dDaTKAs`Q.&]"2Vmoa5k>F_8F74alU\K_8F74ao9KIb65Z!`Q-*^b6>`"`Q-*D
k04(G_o9[<bN@%N_8F4na2uNebm)#%`Q-*Dc0*@V_8F74aihrlc3D,&`Q-*Dc0<L[cHa8D`Q-*Dc-GP"
#Jn<sa2uNLcKNU[_8F74aihrSkg0UO_o9[<bK\>ZnC%0]#f4Eta2uNLcHth(#f4Eta2uNLcHth($,ONu
a2uNLcHt#)e-Wt/`Q-*Dc-F\ap=/cb$,ONua2uNLcHt#)e-a%0`Q-*Dc-F\aeEbWl_8F74aihrSd*gG0
eI'.1`Q-*Dc-F\aeGRkdeI042`Q-*Dc-F\aeCO!<$c0a"a2uNLcHt"hf'Lur_8F74aihrSd*gFpm+2T\
_o9[<bK\>ZdaS<Kf^7?#_8F74aihrSd*gFpf^7?#_8F74aihrSd*gFpf^7?#_8F74aihrSd*gFpf^7Ar
_8F74aian5cHt"hf%BBD%)Kj#a2uNLcHt"hf%BBD%Dfs$a2uNLcHt"hf%A^Eg^V*;`Q-*Dc-F\aeCN:+
mb@fY%)^')aihrSd*gFpf\5cK%`-'%a2uNLcHt"hf%A^3n(nPj_o9[<bK\>ZdaZk#g>)/R%`-'%a2uNL
cHt"hf%A^3oA9H&&&H0&a2uNLcHt"hf%A^3hXKG6_8F74aihrSd*gFpf\5-;nDFhn_o9[<bK\>ZdaZk#
g>(QSi"3`B`Q-*Dc-F\aeCN:+gtpuciV;@C_8F74aihrSd*gFpf\5-;i:5b;_8F74aihrSd*gFpf\5-;
i:5b<_8F74aihrSd*gFpf\5-;i8O7e'#DK)a2uNLcHt"hf%A^3hVdAQoA^G!_o9[<bK\>ZdaZk#g>(QC
iUZ"A_8F74aihrSd*gFpf\5-;i8N_fjV#DI`Q-*Dc-F\aeCN:+gtpuJj7D@A_8F74aihrSd*gFpf\-J`
hVdAQoApY%_o9[<bK\>ZdaZk#g>(QCiT'%ljqGSK`Q-*Dc-F\aeCN:+gtpuJj5opq'>_T*a2uNLcHt"h
f%A^3hVdAQjn.[@_8F74aihrScjS:Of%A^3hVdAQjlc=#'Z%]+a2uNLcHt"hf%A^3hVdAQjlc=#'Z%]+
a2uNLcHt"hf%A^3hVdAQjlc=#'u@f,a2uNLcHt"hf%A^3hVdAQjlbn%l3"l?`Q&S4bK\>ZdaZk#g>(QC
iT'%_l1XBW_8F74aihrSd*gFpf\5-;i8N_XkNV^*'u@f,a2uNLcHt"hf%A^3hVdAQjlbn%lP77R`Q-*D
c-F\aeCN:+gtpuJj5oIgpZiU\_8F74aihrSd*gFpf\5-;i8N_XkNV^+(;[o-a2uNLcHt"hf%A^3hVdAQ
jlbmop[&a4_o9[<bK\>ZdaZk#g>(QCiT'%_l0J*2(;[o-a2uNLcHt"hf%A^3hVdAQjlbmorU'LL(W"#.
a2uNLcHt"hf%A^3hVdAQjlbmomJ-,d_8F74aihrSd*gFpf\5-;i8N_XkNV="q!T$8_o9[<bK\>ZdaZk#
g>(QCiT'%_l0Ia3mhN[V`Q-*Dc-F\aeCN:+gtpuJj5oIg!pf7Bq=,<<_o9[<bK\>ZdaZk#g>(QCiT'%_
l0Ia*q=,<<_o9[<bK\>ZdaZk#g>(QCiT'%_l0Ia*q=,?=_o9[<bK\>ZdaZk#g>(QCiT'%_l0Ia*nbVef
_8F74aihrSd*gFpf\5-;i!A<%jlbmomI0TAneo9]`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02qXPQ@_o9[<
bK\>ZdaZk#g>(QCiT'%_l0Ia*nacSL)Ss>1a2uNLcHt"hf%A^3hVdAQjlbmomI0T9qt(94_o9[<bK\>Z
daZhXf\5-;i8N_XkNV="n+#uGoGbWa`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02o(;kR)o9G2a2uNLcHt"h
f%A^3hVdAQjlbmomI0T9o_eD%_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@r:U?2_o9[<bKUdId*gFp
f\5-;i8N_XkNV="n+#u@pAO_*_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pAO_*_8F74aihrSd*gFp
f\5-;i8N_XkNV="n+#u@pAO_+_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pA"X_!PuYm`Q-*Dc-F\a
eCN:+gtpuJj5oIglg=02o(;YNrqRSN_o9[<bK\>ZdaZk#g>(QCiT'%_l0Ia*nac>Gq#:(Q_8F74aihrS
d*gFpf\5-;i8N_XkNV="n+#u@pA"L]qn^1ha2uNLcHt"hf%A^3hVdAQjlbmomI0T9o_/'/qYU0+_o9[<
bK\>ZdaZk#g>(QCiT'%_l0Ia*nac>Gq"jmb_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pA"L^r5$:i
a2uNLcHt"hf%A^3hVdAQjlbmomI0T9o_/(Vr;=CK`Q-*Dc-F\aeCN:+gtpuJj5oIglg=.Unac>Gq"jpd
_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pA"L^rkZLka2uNLcHt"hf%A^3hVdAQjlbmomI0T9o_/(V
r;OOM`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02o(;YNqY^>C~>

%%EndBinary
grestore
np
grestore
gsave
486.138 505.12 mo
533.239 505.12 li
533.239 556.514 li
486.138 556.514 li
486.138 505.12 li
clp
486.138 505.12 mo
533.239 505.12 li
533.239 556.514 li
486.138 556.514 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 659 ]ct
[47.1007 0 0 -51.3941 486.138 153.88 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 33 
/H 37 
/M[33 0 0 -37 0 37 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 33 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 33 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 33 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
S\aI+r5/NNiPPZ3iPP]4_rAT8_8GWXpV[*K_rAT9_8F7P`WEuo`T+r>_8F7_`q%+O_8F74jN%G>_o9[W
a908r`Q.&\"2Vmoa8!dDaTKAs`Q.&]"2Vmoa5k>F_8F74alU\K_8F74ao9KIb65Z!`Q-*^b6>`"`Q-*D
k04(G_o9[<bN@%N_8F4na2uNebm)#%`Q-*Dc0*@V_8F74aihrlc3D,&`Q-*Dc0<L[cHa8D`Q-*Dc-GP"
#Jn<sa2uNLcKNU[_8F74aihrSkg0UO_o9[<bK\>ZnC%0]#f4Eta2uNLcHth(#f4Eta2uNLcHth($,ONu
a2uNLcHt#)e-Wt/`Q-*Dc-F\ap=/cb$,ONua2uNLcHt#)e-a%0`Q-*Dc-F\aeEbWl_8F74aihrSd*gG0
eI'.1`Q-*Dc-F\aeGRkdeI042`Q-*Dc-F\aeCO!<$c0a"a2uNLcHt"hf'Lur_8F74aihrSd*gFpm+2T\
_o9[<bK\>ZdaS<Kf^7?#_8F74aihrSd*gFpf^7?#_8F74aihrSd*gFpf^7?#_8F74aihrSd*gFpf^7Ar
_8F74aian5cHt"hf%BBD%)Kj#a2uNLcHt"hf%BBD%Dfs$a2uNLcHt"hf%A^Eg^V*;`Q-*Dc-F\aeCN:+
mb@fY%)^')aihrSd*gFpf\5cK%`-'%a2uNLcHt"hf%A^3n(nPj_o9[<bK\>ZdaZk#g>)/R%`-'%a2uNL
cHt"hf%A^3oA9H&&&H0&a2uNLcHt"hf%A^3hXKG6_8F74aihrSd*gFpf\5-;nDFhn_o9[<bK\>ZdaZk#
g>(QSi"3`B`Q-*Dc-F\aeCN:+gtpuciV;@C_8F74aihrSd*gFpf\5-;i:5b;_8F74aihrSd*gFpf\5-;
i:5b<_8F74aihrSd*gFpf\5-;i8O7e'#DK)a2uNLcHt"hf%A^3hVdAQoA^G!_o9[<bK\>ZdaZk#g>(QC
iUZ"A_8F74aihrSd*gFpf\5-;i8N_fjV#DI`Q-*Dc-F\aeCN:+gtpuJj7D@A_8F74aihrSd*gFpf\-J`
hVdAQoApY%_o9[<bK\>ZdaZk#g>(QCiT'%ljqGSK`Q-*Dc-F\aeCN:+gtpuJj5opq'>_T*a2uNLcHt"h
f%A^3hVdAQjn.[@_8F74aihrScjS:Of%A^3hVdAQjlc=#'Z%]+a2uNLcHt"hf%A^3hVdAQjlc=#'Z%]+
a2uNLcHt"hf%A^3hVdAQjlc=#'u@f,a2uNLcHt"hf%A^3hVdAQjlbn%l3"l?`Q&S4bK\>ZdaZk#g>(QC
iT'%_l1XBW_8F74aihrSd*gFpf\5-;i8N_XkNV^*'u@f,a2uNLcHt"hf%A^3hVdAQjlbn%lP77R`Q-*D
c-F\aeCN:+gtpuJj5oIgpZiU\_8F74aihrSd*gFpf\5-;i8N_XkNV^+(;[o-a2uNLcHt"hf%A^3hVdAQ
jlbmop[&a4_o9[<bK\>ZdaZk#g>(QCiT'%_l0J*2(;[o-a2uNLcHt"hf%A^3hVdAQjlbmorU'LL(W"#.
a2uNLcHt"hf%A^3hVdAQjlbmomJ-,d_8F74aihrSd*gFpf\5-;i8N_XkNV="q!T$8_o9[<bK\>ZdaZk#
g>(QCiT'%_l0Ia3mhN[V`Q-*Dc-F\aeCN:+gtpuJj5oIg!pf7Bq=,<<_o9[<bK\>ZdaZk#g>(QCiT'%_
l0Ia*q=,<<_o9[<bK\>ZdaZk#g>(QCiT'%_l0Ia*q=,?=_o9[<bK\>ZdaZk#g>(QCiT'%_l0Ia*nbVef
_8F74aihrSd*gFpf\5-;i!A<%jlbmomI0TAneo9]`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02qXPQ@_o9[<
bK\>ZdaZk#g>(QCiT'%_l0Ia*nacSL)Ss>1a2uNLcHt"hf%A^3hVdAQjlbmomI0T9qt(94_o9[<bK\>Z
daZhXf\5-;i8N_XkNV="n+#uGoGbWa`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02o(;kR)o9G2a2uNLcHt"h
f%A^3hVdAQjlbmomI0T9o_eD%_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@r:U?2_o9[<bKUdId*gFp
f\5-;i8N_XkNV="n+#u@pAO_*_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pAO_*_8F74aihrSd*gFp
f\5-;i8N_XkNV="n+#u@pAO_+_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pA"X_!PuYm`Q-*Dc-F\a
eCN:+gtpuJj5oIglg=02o(;YNrqRSN_o9[<bK\>ZdaZk#g>(QCiT'%_l0Ia*nac>Gq#:(Q_8F74aihrS
d*gFpf\5-;i8N_XkNV="n+#u@pA"L]qn^1ha2uNLcHt"hf%A^3hVdAQjlbmomI0T9o_/'/qYU0+_o9[<
bK\>ZdaZk#g>(QCiT'%_l0Ia*nac>Gq"jmb_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pA"L^r5$:i
a2uNLcHt"hf%A^3hVdAQjlbmomI0T9o_/(Vr;=CK`Q-*Dc-F\aeCN:+gtpuJj5oIglg=.Unac>Gq"jpd
_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pA"L^rkZLka2uNLcHt"hf%A^3hVdAQjlbmomI0T9o_/(V
r;OOM`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02o(;YNqY^>C~>

%%EndBinary
grestore
np
grestore
gsave
439.038 556.514 mo
486.138 556.514 li
486.138 607.908 li
439.038 607.908 li
439.038 556.514 li
clp
466.306 605.844 mo
441.349 591.596 li
455.653 567.077 li
459.176 561.709 465.147 558.539 471.414 558.539 cv
471.414 558.539 li
472.221 558.539 473.032 558.592 473.845 558.699 cv
474.778 559.011 475.677 559.411 476.53 559.896 cv
476.53 559.895 li
481.372 562.647 484.069 567.673 484.07 572.893 cv
484.07 575.524 483.385 578.199 481.941 580.657 cv
481.939 580.66 li
467.459 605.616 li
466.306 605.844 li
460.619 595.053 mo
458.331 599.063 li
462.581 601.437 li
464.869 597.425 li
460.619 595.053 li
455.021 591.902 mo
452.733 595.912 li
456.983 598.285 li
459.271 594.275 li
455.021 591.902 li
463.849 589.692 mo
461.559 593.702 li
465.809 596.076 li
468.099 592.066 li
463.849 589.692 li
449.423 588.915 mo
447.135 592.924 li
451.384 595.298 li
453.673 591.288 li
449.423 588.915 li
458.249 586.541 mo
455.961 590.552 li
460.211 592.924 li
462.499 588.915 li
458.249 586.541 li
466.995 584.618 mo
464.707 588.628 li
468.956 591.002 li
471.245 586.992 li
466.995 584.618 li
452.651 583.554 mo
450.362 587.565 li
454.612 589.937 li
456.901 585.927 li
452.651 583.554 li
461.397 581.468 mo
459.108 585.478 li
463.358 587.852 li
465.646 583.84 li
461.397 581.468 li
453.831 573.933 mo
453.741 574.085 453.716 574.263 453.762 574.433 cv
453.808 574.603 453.919 574.746 454.074 574.834 cv
476.389 587.488 li
476.492 587.546 476.608 587.576 476.725 587.576 cv
476.786 587.576 476.848 587.568 476.908 587.551 cv
477.083 587.503 477.23 587.387 477.316 587.23 cv
481.011 580.51 li
482.269 578.38 482.869 576.047 482.869 573.75 cv
482.87 569.148 480.464 564.672 476.147 562.193 cv
474.08 561.005 471.729 560.38 469.334 560.38 cv
469.323 560.38 li
469.254 560.384 li
464.489 560.869 460.215 563.498 457.658 567.516 cv
457.648 567.532 li
453.831 573.933 li
454.411 574.265 li
453.831 573.933 li
455.798 578.481 mo
453.509 582.491 li
457.758 584.865 li
460.048 580.853 li
455.798 578.481 li
476.462 586.01 mo
455.33 574.027 li
458.802 568.204 li
461.137 564.54 465.026 562.147 469.359 561.695 cv
471.506 561.699 473.614 562.262 475.468 563.327 cv
475.468 563.327 li
479.357 565.559 481.525 569.591 481.526 573.75 cv
481.526 575.827 480.985 577.932 479.844 579.86 cv
479.834 579.879 li
476.462 586.01 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 659 ]ct
[44.2461 0 0 -48.6161 440.465 101.097 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 31 
/H 35 
/M[31 0 0 -35 0 35 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 31 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 31 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 31 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
UVl-1!lMspjhq/:j2:u9`T5#>_o:]V!Q2nT`otDD_o9[Xa9'8ua5tAD_o9[Xa9'8ua8=!EaTBB!a5tDE
_o9[XaTKH"a3!Je"2i*uana-Jb6,Z$a3!Je"N/4!aiikl"N/4!aiikl"N/4!aijG'n]_6T`Q-*Dc03FV
_o9[<bK]7r"iJ="aihrmc3D2*a2uNLcM#WWcj%D,a2uNLcKW[[_o9[<bK\>scj.J-a2uNLcHtk)#K+O$
aihrSd.Gc\dKd\/a2uNLcHtk)#fFX%aihrSd*h70#fFX%aihrSd*h70#fFX%aihrSd*hL7qU>hh`Q-*D
c-F\aeEk]l_o9[<bK\>Zda[X6$,aa&aihrSd*gG1eI'45a2uNLcHt"hf(%Ajf*]F7a2uNLcHt"hf'V&r
_o9[<bK\>ZdaZk8f*fL8a2uNLcHt"hf%BED$cBs(aihrSd*gFpf^IK%fu(eLaihrSd*gFpf^@E#_o9[<
bK\>ZdaZk#mb/&d`Q-*Dc-F\aeCN:?g'bg;a2uNLcHt"hf%BEE!Q2k`a2uNLcHt"hf%A^Fg^M*>a2uNL
cHt"hf%A^Fg^M*>a2uNLcHt"hf%A^Fg^V0?a2uNLcHt"hf%A^3nD4;c`Q-*D#gLZAdaZk#g>)2S%E$0*
aihrSd*gFpf\5-Mh@@HBa2uNLcHt"hf%A^3hXTM6_o9[<bK\>ZdaZk#g>(QTi!70=a2uNLcHldDeCN:+
gtqSZ&&ZB,aihrSd*gFpf\5-;i:>h;_o9[<bK\>ZdaZk#g>(QCo&1+s`Q-*Dc-F\aeCN:+gtpu[i<mKA
a2uNLcHt"hecj^[gtpuJoA^D"`Q-*Dc-F\aeCN:+gtpuJoA^D"`Q-*Dc-F\aeCN:+gtpuJoA^G#`Q-*D
c-F\aeCN:+gtpuJj7MFB_o9[<bK\>ZdaZk#g=ueei8N_gjUoDLa2uNLcHt"hf%A^3hVdAQo]6_'`Q-*D
c-F\aeCN:+gtpuJj5osr'#V]/aihrSd*gFpf\5-;i8N_Xp#Zh'`Q-*Dc-F\aeCN:+gtpuJ!TW;7jqGYO
a2uNLcHt"hf%A^3hVdAQjlc@$'>qf0aihrSd*gFpf\5-;i8N_XkP"*Q_o9[<bK\>ZdaZk#g>(QCiT'%_
p?31-`Q-*Dc-F\aeCN:+gtpuJj5oG(l1aHW_o9[<bK\>ZdaZk#g>(QCiT'%_l1aHW_o9[<bK\>ZdaZk#
g>(QCiT'%_l1aHW_o9[<bK\>ZdaZk#g>(QCiT'%_l1aKZ_o9[<bK\>ZdaZk#g>(QCiT'%_l0I[2lP.7U
a2uNLcHt"hf%A^3hVdAQjlbn&lP7=Va2uNLcHt"hf%A^3hVdAQjlbmoq!Ag6`Q-*Dc-F\aeCN:+gtpuJ
j5oIglhKi^_o9[<bK\>ZdaZk#g>(QCiT'%_l0J<8r9Y9;`Q-*Dc-F\aeCN:+gtpuJj5oIglg=N:(;n,3
aihrSd*gFpf\5-;i8N_XkNV="q<o*:`Q-*Dc-F\aeCN:+gtpuJj5oIglg=N:(W454aihrSd*gFpf\5-;
i8N_XkNV="n,2\nnaXN9a2uNLcHt"hf%A^3hVdAQjlbmomI0oA(W454aihrSd*gFpf\5-;i8N_XkNV="
n+uPk_o9[<bK\>ZdaZk#g>(QCiT'%_l0Ia*nb_ko_o9[<bK\>ZdaZk#g>(QCiT'%_l0Ia*nb_kW_\^;4
aihrSd*gFpf\5-;i8N_XkNV="n+$;G)8jG6aihrSd*gFpf\5-;i8N_XkNV="n+#uHoGPQca2uNLcHt"h
f%A^3hVdAQjlbmomI0T9r:ClE`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02o)/+^_o9[<(<atJd*gFpf\5-;
i8N_XkNV="n+#u@rUq/I`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02o(;nS)T0P7aihrSd*gFpf\5-;i8N_X
kNV="n+#u@rUq2J`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02o(;YTpBJOSa2uNLc4nXReCN:+gtpuJj5oIg
lg=02o(;YTpD_#ha2uNLcHt"hf%A^3hVdAQjlbmomI0T9o_/:Y8&N<daihrSd*gFpf\5-;i8N_XkNV="
n+#u@pA"IZ_o9[<bK\>ZdaZk#g>(QCiT'%_l0Ia*nac>Gq"aa'`Q-*Dc-F\ae:-!$g>(QCiT'%_l0Ia*
nac>Gq"aa'`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02o(;YNqYS1La2uNLcHt"hf%A^3hVdAQjlbmomI0T9
o_/(VqnpCnaihrSd*gFpf\5-;i8N_XkNV="n+#u@pA"L]_o9[<bK\>ZdaZk#g/$M\i8N_XkNV="n+#u@
pA"L^_o9[<bK\>ZdaZk#g>(QCiT'%_l0Ia*nac>Gq"jp+`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02o(;YN
qYYj~>

%%EndBinary
grestore
np
grestore
gsave
486.138 556.514 mo
533.239 556.514 li
533.239 607.908 li
486.138 607.908 li
486.138 556.514 li
clp
486.138 556.514 mo
533.239 556.514 li
533.239 607.908 li
486.138 607.908 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 659 ]ct
[47.1007 0 0 -51.3941 486.138 102.486 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 33 
/H 37 
/M[33 0 0 -37 0 37 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 33 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 33 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 33 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
S\aI+r5/NNiPPZ3iPP]4_rAT8_8GWXpV[*K_rAT9_8F7P`WEuo`T+r>_8F7_`q%+O_8F74jN%G>_o9[W
a908r`Q.&\"2Vmoa8!dDaTKAs`Q.&]"2Vmoa5k>F_8F74alU\K_8F74ao9KIb65Z!`Q-*^b6>`"`Q-*D
k04(G_o9[<bN@%N_8F4na2uNebm)#%`Q-*Dc0*@V_8F74aihrlc3D,&`Q-*Dc0<L[cHa8D`Q-*Dc-GP"
#Jn<sa2uNLcKNU[_8F74aihrSkg0UO_o9[<bK\>ZnC%0]#f4Eta2uNLcHth(#f4Eta2uNLcHth($,ONu
a2uNLcHt#)e-Wt/`Q-*Dc-F\ap=/cb$,ONua2uNLcHt#)e-a%0`Q-*Dc-F\aeEbWl_8F74aihrSd*gG0
eI'.1`Q-*Dc-F\aeGRkdeI042`Q-*Dc-F\aeCO!<$c0a"a2uNLcHt"hf'Lur_8F74aihrSd*gFpm+2T\
_o9[<bK\>ZdaS<Kf^7?#_8F74aihrSd*gFpf^7?#_8F74aihrSd*gFpf^7?#_8F74aihrSd*gFpf^7Ar
_8F74aian5cHt"hf%BBD%)Kj#a2uNLcHt"hf%BBD%Dfs$a2uNLcHt"hf%A^Eg^V*;`Q-*Dc-F\aeCN:+
mb@fY%)^')aihrSd*gFpf\5cK%`-'%a2uNLcHt"hf%A^3n(nPj_o9[<bK\>ZdaZk#g>)/R%`-'%a2uNL
cHt"hf%A^3oA9H&&&H0&a2uNLcHt"hf%A^3hXKG6_8F74aihrSd*gFpf\5-;nDFhn_o9[<bK\>ZdaZk#
g>(QSi"3`B`Q-*Dc-F\aeCN:+gtpuciV;@C_8F74aihrSd*gFpf\5-;i:5b;_8F74aihrSd*gFpf\5-;
i:5b<_8F74aihrSd*gFpf\5-;i8O7e'#DK)a2uNLcHt"hf%A^3hVdAQoA^G!_o9[<bK\>ZdaZk#g>(QC
iUZ"A_8F74aihrSd*gFpf\5-;i8N_fjV#DI`Q-*Dc-F\aeCN:+gtpuJj7D@A_8F74aihrSd*gFpf\-J`
hVdAQoApY%_o9[<bK\>ZdaZk#g>(QCiT'%ljqGSK`Q-*Dc-F\aeCN:+gtpuJj5opq'>_T*a2uNLcHt"h
f%A^3hVdAQjn.[@_8F74aihrScjS:Of%A^3hVdAQjlc=#'Z%]+a2uNLcHt"hf%A^3hVdAQjlc=#'Z%]+
a2uNLcHt"hf%A^3hVdAQjlc=#'u@f,a2uNLcHt"hf%A^3hVdAQjlbn%l3"l?`Q&S4bK\>ZdaZk#g>(QC
iT'%_l1XBW_8F74aihrSd*gFpf\5-;i8N_XkNV^*'u@f,a2uNLcHt"hf%A^3hVdAQjlbn%lP77R`Q-*D
c-F\aeCN:+gtpuJj5oIgpZiU\_8F74aihrSd*gFpf\5-;i8N_XkNV^+(;[o-a2uNLcHt"hf%A^3hVdAQ
jlbmop[&a4_o9[<bK\>ZdaZk#g>(QCiT'%_l0J*2(;[o-a2uNLcHt"hf%A^3hVdAQjlbmorU'LL(W"#.
a2uNLcHt"hf%A^3hVdAQjlbmomJ-,d_8F74aihrSd*gFpf\5-;i8N_XkNV="q!T$8_o9[<bK\>ZdaZk#
g>(QCiT'%_l0Ia3mhN[V`Q-*Dc-F\aeCN:+gtpuJj5oIg!pf7Bq=,<<_o9[<bK\>ZdaZk#g>(QCiT'%_
l0Ia*q=,<<_o9[<bK\>ZdaZk#g>(QCiT'%_l0Ia*q=,?=_o9[<bK\>ZdaZk#g>(QCiT'%_l0Ia*nbVef
_8F74aihrSd*gFpf\5-;i!A<%jlbmomI0TAneo9]`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02qXPQ@_o9[<
bK\>ZdaZk#g>(QCiT'%_l0Ia*nacSL)Ss>1a2uNLcHt"hf%A^3hVdAQjlbmomI0T9qt(94_o9[<bK\>Z
daZhXf\5-;i8N_XkNV="n+#uGoGbWa`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02o(;kR)o9G2a2uNLcHt"h
f%A^3hVdAQjlbmomI0T9o_eD%_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@r:U?2_o9[<bKUdId*gFp
f\5-;i8N_XkNV="n+#u@pAO_*_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pAO_*_8F74aihrSd*gFp
f\5-;i8N_XkNV="n+#u@pAO_+_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pA"X_!PuYm`Q-*Dc-F\a
eCN:+gtpuJj5oIglg=02o(;YNrqRSN_o9[<bK\>ZdaZk#g>(QCiT'%_l0Ia*nac>Gq#:(Q_8F74aihrS
d*gFpf\5-;i8N_XkNV="n+#u@pA"L]qn^1ha2uNLcHt"hf%A^3hVdAQjlbmomI0T9o_/'/qYU0+_o9[<
bK\>ZdaZk#g>(QCiT'%_l0Ia*nac>Gq"jmb_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pA"L^r5$:i
a2uNLcHt"hf%A^3hVdAQjlbmomI0T9o_/(Vr;=CK`Q-*Dc-F\aeCN:+gtpuJj5oIglg=.Unac>Gq"jpd
_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pA"L^rkZLka2uNLcHt"hf%A^3hVdAQjlbmomI0T9o_/(V
r;OOM`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02o(;YNqY^>C~>

%%EndBinary
grestore
np
grestore
gsave
439.038 607.908 mo
486.138 607.908 li
486.138 659.302 li
439.038 659.302 li
439.038 607.908 li
clp
439.038 607.908 mo
486.138 607.908 li
486.138 659.302 li
439.038 659.302 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 659 ]ct
[47.1007 0 0 -51.3941 439.038 51.0921 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 33 
/H 37 
/M[33 0 0 -37 0 37 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 33 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 33 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 33 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
S\aI+r5/NNiPPZ3iPP]4_rAT8_8GWXpV[*K_rAT9_8F7P`WEuo`T+r>_8F7_`q%+O_8F74jN%G>_o9[W
a908r`Q.&\"2Vmoa8!dDaTKAs`Q.&]"2Vmoa5k>F_8F74alU\K_8F74ao9KIb65Z!`Q-*^b6>`"`Q-*D
k04(G_o9[<bN@%N_8F4na2uNebm)#%`Q-*Dc0*@V_8F74aihrlc3D,&`Q-*Dc0<L[cHa8D`Q-*Dc-GP"
#Jn<sa2uNLcKNU[_8F74aihrSkg0UO_o9[<bK\>ZnC%0]#f4Eta2uNLcHth(#f4Eta2uNLcHth($,ONu
a2uNLcHt#)e-Wt/`Q-*Dc-F\ap=/cb$,ONua2uNLcHt#)e-a%0`Q-*Dc-F\aeEbWl_8F74aihrSd*gG0
eI'.1`Q-*Dc-F\aeGRkdeI042`Q-*Dc-F\aeCO!<$c0a"a2uNLcHt"hf'Lur_8F74aihrSd*gFpm+2T\
_o9[<bK\>ZdaS<Kf^7?#_8F74aihrSd*gFpf^7?#_8F74aihrSd*gFpf^7?#_8F74aihrSd*gFpf^7Ar
_8F74aian5cHt"hf%BBD%)Kj#a2uNLcHt"hf%BBD%Dfs$a2uNLcHt"hf%A^Eg^V*;`Q-*Dc-F\aeCN:+
mb@fY%)^')aihrSd*gFpf\5cK%`-'%a2uNLcHt"hf%A^3n(nPj_o9[<bK\>ZdaZk#g>)/R%`-'%a2uNL
cHt"hf%A^3oA9H&&&H0&a2uNLcHt"hf%A^3hXKG6_8F74aihrSd*gFpf\5-;nDFhn_o9[<bK\>ZdaZk#
g>(QSi"3`B`Q-*Dc-F\aeCN:+gtpuciV;@C_8F74aihrSd*gFpf\5-;i:5b;_8F74aihrSd*gFpf\5-;
i:5b<_8F74aihrSd*gFpf\5-;i8O7e'#DK)a2uNLcHt"hf%A^3hVdAQoA^G!_o9[<bK\>ZdaZk#g>(QC
iUZ"A_8F74aihrSd*gFpf\5-;i8N_fjV#DI`Q-*Dc-F\aeCN:+gtpuJj7D@A_8F74aihrSd*gFpf\-J`
hVdAQoApY%_o9[<bK\>ZdaZk#g>(QCiT'%ljqGSK`Q-*Dc-F\aeCN:+gtpuJj5opq'>_T*a2uNLcHt"h
f%A^3hVdAQjn.[@_8F74aihrScjS:Of%A^3hVdAQjlc=#'Z%]+a2uNLcHt"hf%A^3hVdAQjlc=#'Z%]+
a2uNLcHt"hf%A^3hVdAQjlc=#'u@f,a2uNLcHt"hf%A^3hVdAQjlbn%l3"l?`Q&S4bK\>ZdaZk#g>(QC
iT'%_l1XBW_8F74aihrSd*gFpf\5-;i8N_XkNV^*'u@f,a2uNLcHt"hf%A^3hVdAQjlbn%lP77R`Q-*D
c-F\aeCN:+gtpuJj5oIgpZiU\_8F74aihrSd*gFpf\5-;i8N_XkNV^+(;[o-a2uNLcHt"hf%A^3hVdAQ
jlbmop[&a4_o9[<bK\>ZdaZk#g>(QCiT'%_l0J*2(;[o-a2uNLcHt"hf%A^3hVdAQjlbmorU'LL(W"#.
a2uNLcHt"hf%A^3hVdAQjlbmomJ-,d_8F74aihrSd*gFpf\5-;i8N_XkNV="q!T$8_o9[<bK\>ZdaZk#
g>(QCiT'%_l0Ia3mhN[V`Q-*Dc-F\aeCN:+gtpuJj5oIg!pf7Bq=,<<_o9[<bK\>ZdaZk#g>(QCiT'%_
l0Ia*q=,<<_o9[<bK\>ZdaZk#g>(QCiT'%_l0Ia*q=,?=_o9[<bK\>ZdaZk#g>(QCiT'%_l0Ia*nbVef
_8F74aihrSd*gFpf\5-;i!A<%jlbmomI0TAneo9]`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02qXPQ@_o9[<
bK\>ZdaZk#g>(QCiT'%_l0Ia*nacSL)Ss>1a2uNLcHt"hf%A^3hVdAQjlbmomI0T9qt(94_o9[<bK\>Z
daZhXf\5-;i8N_XkNV="n+#uGoGbWa`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02o(;kR)o9G2a2uNLcHt"h
f%A^3hVdAQjlbmomI0T9o_eD%_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@r:U?2_o9[<bKUdId*gFp
f\5-;i8N_XkNV="n+#u@pAO_*_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pAO_*_8F74aihrSd*gFp
f\5-;i8N_XkNV="n+#u@pAO_+_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pA"X_!PuYm`Q-*Dc-F\a
eCN:+gtpuJj5oIglg=02o(;YNrqRSN_o9[<bK\>ZdaZk#g>(QCiT'%_l0Ia*nac>Gq#:(Q_8F74aihrS
d*gFpf\5-;i8N_XkNV="n+#u@pA"L]qn^1ha2uNLcHt"hf%A^3hVdAQjlbmomI0T9o_/'/qYU0+_o9[<
bK\>ZdaZk#g>(QCiT'%_l0Ia*nac>Gq"jmb_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pA"L^r5$:i
a2uNLcHt"hf%A^3hVdAQjlbmomI0T9o_/(Vr;=CK`Q-*Dc-F\aeCN:+gtpuJj5oIglg=.Unac>Gq"jpd
_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pA"L^rkZLka2uNLcHt"hf%A^3hVdAQjlbmomI0T9o_/(V
r;OOM`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02o(;YNqY^>C~>

%%EndBinary
grestore
np
grestore
gsave
486.138 607.908 mo
533.239 607.908 li
533.239 659.302 li
486.138 659.302 li
486.138 607.908 li
clp
486.138 607.908 mo
533.239 607.908 li
533.239 659.302 li
486.138 659.302 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 659 ]ct
[47.1007 0 0 -51.3941 486.138 51.0921 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 33 
/H 37 
/M[33 0 0 -37 0 37 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 33 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 33 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 33 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
S\aI+r5/NNiPPZ3iPP]4_rAT8_8GWXpV[*K_rAT9_8F7P`WEuo`T+r>_8F7_`q%+O_8F74jN%G>_o9[W
a908r`Q.&\"2Vmoa8!dDaTKAs`Q.&]"2Vmoa5k>F_8F74alU\K_8F74ao9KIb65Z!`Q-*^b6>`"`Q-*D
k04(G_o9[<bN@%N_8F4na2uNebm)#%`Q-*Dc0*@V_8F74aihrlc3D,&`Q-*Dc0<L[cHa8D`Q-*Dc-GP"
#Jn<sa2uNLcKNU[_8F74aihrSkg0UO_o9[<bK\>ZnC%0]#f4Eta2uNLcHth(#f4Eta2uNLcHth($,ONu
a2uNLcHt#)e-Wt/`Q-*Dc-F\ap=/cb$,ONua2uNLcHt#)e-a%0`Q-*Dc-F\aeEbWl_8F74aihrSd*gG0
eI'.1`Q-*Dc-F\aeGRkdeI042`Q-*Dc-F\aeCO!<$c0a"a2uNLcHt"hf'Lur_8F74aihrSd*gFpm+2T\
_o9[<bK\>ZdaS<Kf^7?#_8F74aihrSd*gFpf^7?#_8F74aihrSd*gFpf^7?#_8F74aihrSd*gFpf^7Ar
_8F74aian5cHt"hf%BBD%)Kj#a2uNLcHt"hf%BBD%Dfs$a2uNLcHt"hf%A^Eg^V*;`Q-*Dc-F\aeCN:+
mb@fY%)^')aihrSd*gFpf\5cK%`-'%a2uNLcHt"hf%A^3n(nPj_o9[<bK\>ZdaZk#g>)/R%`-'%a2uNL
cHt"hf%A^3oA9H&&&H0&a2uNLcHt"hf%A^3hXKG6_8F74aihrSd*gFpf\5-;nDFhn_o9[<bK\>ZdaZk#
g>(QSi"3`B`Q-*Dc-F\aeCN:+gtpuciV;@C_8F74aihrSd*gFpf\5-;i:5b;_8F74aihrSd*gFpf\5-;
i:5b<_8F74aihrSd*gFpf\5-;i8O7e'#DK)a2uNLcHt"hf%A^3hVdAQoA^G!_o9[<bK\>ZdaZk#g>(QC
iUZ"A_8F74aihrSd*gFpf\5-;i8N_fjV#DI`Q-*Dc-F\aeCN:+gtpuJj7D@A_8F74aihrSd*gFpf\-J`
hVdAQoApY%_o9[<bK\>ZdaZk#g>(QCiT'%ljqGSK`Q-*Dc-F\aeCN:+gtpuJj5opq'>_T*a2uNLcHt"h
f%A^3hVdAQjn.[@_8F74aihrScjS:Of%A^3hVdAQjlc=#'Z%]+a2uNLcHt"hf%A^3hVdAQjlc=#'Z%]+
a2uNLcHt"hf%A^3hVdAQjlc=#'u@f,a2uNLcHt"hf%A^3hVdAQjlbn%l3"l?`Q&S4bK\>ZdaZk#g>(QC
iT'%_l1XBW_8F74aihrSd*gFpf\5-;i8N_XkNV^*'u@f,a2uNLcHt"hf%A^3hVdAQjlbn%lP77R`Q-*D
c-F\aeCN:+gtpuJj5oIgpZiU\_8F74aihrSd*gFpf\5-;i8N_XkNV^+(;[o-a2uNLcHt"hf%A^3hVdAQ
jlbmop[&a4_o9[<bK\>ZdaZk#g>(QCiT'%_l0J*2(;[o-a2uNLcHt"hf%A^3hVdAQjlbmorU'LL(W"#.
a2uNLcHt"hf%A^3hVdAQjlbmomJ-,d_8F74aihrSd*gFpf\5-;i8N_XkNV="q!T$8_o9[<bK\>ZdaZk#
g>(QCiT'%_l0Ia3mhN[V`Q-*Dc-F\aeCN:+gtpuJj5oIg!pf7Bq=,<<_o9[<bK\>ZdaZk#g>(QCiT'%_
l0Ia*q=,<<_o9[<bK\>ZdaZk#g>(QCiT'%_l0Ia*q=,?=_o9[<bK\>ZdaZk#g>(QCiT'%_l0Ia*nbVef
_8F74aihrSd*gFpf\5-;i!A<%jlbmomI0TAneo9]`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02qXPQ@_o9[<
bK\>ZdaZk#g>(QCiT'%_l0Ia*nacSL)Ss>1a2uNLcHt"hf%A^3hVdAQjlbmomI0T9qt(94_o9[<bK\>Z
daZhXf\5-;i8N_XkNV="n+#uGoGbWa`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02o(;kR)o9G2a2uNLcHt"h
f%A^3hVdAQjlbmomI0T9o_eD%_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@r:U?2_o9[<bKUdId*gFp
f\5-;i8N_XkNV="n+#u@pAO_*_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pAO_*_8F74aihrSd*gFp
f\5-;i8N_XkNV="n+#u@pAO_+_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pA"X_!PuYm`Q-*Dc-F\a
eCN:+gtpuJj5oIglg=02o(;YNrqRSN_o9[<bK\>ZdaZk#g>(QCiT'%_l0Ia*nac>Gq#:(Q_8F74aihrS
d*gFpf\5-;i8N_XkNV="n+#u@pA"L]qn^1ha2uNLcHt"hf%A^3hVdAQjlbmomI0T9o_/'/qYU0+_o9[<
bK\>ZdaZk#g>(QCiT'%_l0Ia*nac>Gq"jmb_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pA"L^r5$:i
a2uNLcHt"hf%A^3hVdAQjlbmomI0T9o_/(Vr;=CK`Q-*Dc-F\aeCN:+gtpuJj5oIglg=.Unac>Gq"jpd
_8F74aihrSd*gFpf\5-;i8N_XkNV="n+#u@pA"L^rkZLka2uNLcHt"hf%A^3hVdAQjlbmomI0T9o_/(V
r;OOM`Q-*Dc-F\aeCN:+gtpuJj5oIglg=02o(;YNqY^>C~>

%%EndBinary
grestore
np
grestore
grestore
grestore
440.436 591.836 mo
440.774 591.268 li
466.306 605.844 li
467.459 605.616 li
481.939 580.66 li
481.941 580.657 li
483.385 578.199 484.07 575.524 484.07 572.893 cv
484.069 567.673 481.372 562.647 476.53 559.895 cv
476.53 559.896 li
475.659 559.401 474.74 558.994 473.785 558.679 cv
473.999 558.056 li
473.907 558.707 li
473.074 558.595 472.241 558.539 471.414 558.539 cv
465.141 558.539 459.165 561.715 455.644 567.091 cv
455.079 566.736 li
455.662 567.063 li
441.019 592.162 li
440.436 591.836 li
440.774 591.268 li
440.436 591.836 li
439.853 591.51 li
454.496 566.41 li
454.514 566.382 li
458.278 560.633 464.677 557.225 471.414 557.225 cv
472.303 557.225 473.196 557.284 474.091 557.405 cv
474.213 557.433 li
475.253 557.776 476.255 558.219 477.203 558.758 cv
477.204 558.758 li
482.481 561.758 485.414 567.234 485.413 572.893 cv
485.413 575.747 484.668 578.653 483.105 581.312 cv
483.106 581.309 li
468.475 606.525 li
468.379 606.691 468.215 606.807 468.025 606.845 cv
466.322 607.183 li
466.162 607.214 465.992 607.187 465.851 607.106 cv
440.098 592.404 li
439.78 592.222 439.67 591.823 439.853 591.51 cv
440.436 591.836 li
f
gsave
434.654 599.328 mo
459.422 613.72 li
460.418 610.388 462.924 607.729 466.189 606.539 cv
440.436 591.836 li
437.38 593.209 435.211 596.019 434.654 599.328 cv
eclp
gsave
433.255 615.089 mo
467.588 615.089 li
467.588 590.464 li
433.255 590.464 li
433.255 615.089 li
eclp
gsave
433.255 565.841 mo
467.588 565.841 li
467.588 590.465 li
433.255 590.465 li
433.255 565.841 li
clp
433.255 565.841 mo
467.588 565.841 li
467.588 590.465 li
433.255 590.465 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 659 ]ct
[34.3329 0 0 -24.6242 433.255 93.1591 ]ct
snap_to_device
<<
/T 1
/W 24 
/H 17 
/M[24 0 0 -17 0 17 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~_8=(+_SX1,_SX1,_SX1,_SX1,_SX1,_8O=3`Pog8`Pog8`Pog8`Pog8`Pog8_8O@9b0%lLb0%lLb0%lL
b0%lLb0%lL_8O@9bg"DWc-=MXc-=MXc-=MXc-=MX_8O@9bg4\adF$@hdF$@hdF$@hdF$@h_8O@9bg4\c
eC<!teC<!teC<!teC<!t_8O@9bg4\cf%Ja0g"G'3g"G'3g"G'3_8O@9bg4\cf%Jj6gt^]?gt^]?gt^]?
_8O@9bg4\cf%Jj8hr!>Khr!>Khr!>K_8O@9bg4\cf%Jj8iT&tYj5]1[j5]1[_8O@9bg4\cf%Jj8iT'(_
k2tggk2tgg_8O@9bg4\cf%Jj8iT'(blg*m&lg*m&_8O@9bg4\cf%Jj8iT'(bm-a<0mdBN2_8O@9bg4\c
f%Jj8iT'(bm-aB6o()AB_8O@9bg4\cf%Jj8iT'(bm-aB7p%A"N_8O@9bg4\cf%Jj8iT'(bm-aB7p%eI\
_8O@9bg4\cf%Jj8iT'(bm-aB7p%eL`~>
<~_8=(+_SX1,_SX1,_SX1,_SX1,_SX1,_8O=3`Pog8`Pog8`Pog8`Pog8`Pog8_8O@9b0%lLb0%lLb0%lL
b0%lLb0%lL_8O@9bg"DWc-=MXc-=MXc-=MXc-=MX_8O@9bg4\adF$@hdF$@hdF$@hdF$@h_8O@9bg4\c
eC<!teC<!teC<!teC<!t_8O@9bg4\cf%Ja0g"G'3g"G'3g"G'3_8O@9bg4\cf%Jj6gt^]?gt^]?gt^]?
_8O@9bg4\cf%Jj8hr!>Khr!>Khr!>K_8O@9bg4\cf%Jj8iT&tYj5]1[j5]1[_8O@9bg4\cf%Jj8iT'(_
k2tggk2tgg_8O@9bg4\cf%Jj8iT'(blg*m&lg*m&_8O@9bg4\cf%Jj8iT'(bm-a<0mdBN2_8O@9bg4\c
f%Jj8iT'(bm-aB6o()AB_8O@9bg4\cf%Jj8iT'(bm-aB7p%A"N_8O@9bg4\cf%Jj8iT'(bm-aB7p%eI\
_8O@9bg4\cf%Jj8iT'(bm-aB7p%eL`~>
<~_8=(+_SX1,_SX1,_SX1,_SX1,_SX1,_8O=3`Pog8`Pog8`Pog8`Pog8`Pog8_8O@9b0%lLb0%lLb0%lL
b0%lLb0%lL_8O@9bg"DWc-=MXc-=MXc-=MXc-=MX_8O@9bg4\adF$@hdF$@hdF$@hdF$@h_8O@9bg4\c
eC<!teC<!teC<!teC<!t_8O@9bg4\cf%Ja0g"G'3g"G'3g"G'3_8O@9bg4\cf%Jj6gt^]?gt^]?gt^]?
_8O@9bg4\cf%Jj8hr!>Khr!>Khr!>K_8O@9bg4\cf%Jj8iT&tYj5]1[j5]1[_8O@9bg4\cf%Jj8iT'(_
k2tggk2tgg_8O@9bg4\cf%Jj8iT'(blg*m&lg*m&_8O@9bg4\cf%Jj8iT'(bm-a<0mdBN2_8O@9bg4\c
f%Jj8iT'(bm-aB6o()AB_8O@9bg4\cf%Jj8iT'(bm-aB7p%A"N_8O@9bg4\cf%Jj8iT'(bm-aB7p%eI\
_8O@9bg4\cf%Jj8iT'(bm-aB7p%eL`~>
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
gsave
467.588 565.841 mo
501.921 565.841 li
501.921 590.465 li
467.588 590.465 li
467.588 565.841 li
clp
467.588 565.841 mo
501.921 565.841 li
501.921 590.465 li
467.588 590.465 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 659 ]ct
[34.3329 0 0 -24.6242 467.588 93.1591 ]ct
snap_to_device
<<
/T 1
/W 24 
/H 17 
/M[24 0 0 -17 0 17 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~_8=(+_SX1,_SX1,_SX1,_SX1,_SX1,_8O=3`Pog8`Pog8`Pog8`Pog8`Pog8_8O@9b0%lLb0%lLb0%lL
b0%lLb0%lL_8O@9bg"DWc-=MXc-=MXc-=MXc-=MX_8O@9bg4\adF$@hdF$@hdF$@hdF$@h_8O@9bg4\c
eC<!teC<!teC<!teC<!t_8O@9bg4\cf%Ja0g"G'3g"G'3g"G'3_8O@9bg4\cf%Jj6gt^]?gt^]?gt^]?
_8O@9bg4\cf%Jj8hr!>Khr!>Khr!>K_8O@9bg4\cf%Jj8iT&tYj5]1[j5]1[_8O@9bg4\cf%Jj8iT'(_
k2tggk2tgg_8O@9bg4\cf%Jj8iT'(blg*m&lg*m&_8O@9bg4\cf%Jj8iT'(bm-a<0mdBN2_8O@9bg4\c
f%Jj8iT'(bm-aB6o()AB_8O@9bg4\cf%Jj8iT'(bm-aB7p%A"N_8O@9bg4\cf%Jj8iT'(bm-aB7p%eI\
_8O@9bg4\cf%Jj8iT'(bm-aB7p%eL`~>
<~_8=(+_SX1,_SX1,_SX1,_SX1,_SX1,_8O=3`Pog8`Pog8`Pog8`Pog8`Pog8_8O@9b0%lLb0%lLb0%lL
b0%lLb0%lL_8O@9bg"DWc-=MXc-=MXc-=MXc-=MX_8O@9bg4\adF$@hdF$@hdF$@hdF$@h_8O@9bg4\c
eC<!teC<!teC<!teC<!t_8O@9bg4\cf%Ja0g"G'3g"G'3g"G'3_8O@9bg4\cf%Jj6gt^]?gt^]?gt^]?
_8O@9bg4\cf%Jj8hr!>Khr!>Khr!>K_8O@9bg4\cf%Jj8iT&tYj5]1[j5]1[_8O@9bg4\cf%Jj8iT'(_
k2tggk2tgg_8O@9bg4\cf%Jj8iT'(blg*m&lg*m&_8O@9bg4\cf%Jj8iT'(bm-a<0mdBN2_8O@9bg4\c
f%Jj8iT'(bm-aB6o()AB_8O@9bg4\cf%Jj8iT'(bm-aB7p%A"N_8O@9bg4\cf%Jj8iT'(bm-aB7p%eI\
_8O@9bg4\cf%Jj8iT'(bm-aB7p%eL`~>
<~_8=(+_SX1,_SX1,_SX1,_SX1,_SX1,_8O=3`Pog8`Pog8`Pog8`Pog8`Pog8_8O@9b0%lLb0%lLb0%lL
b0%lLb0%lL_8O@9bg"DWc-=MXc-=MXc-=MXc-=MX_8O@9bg4\adF$@hdF$@hdF$@hdF$@h_8O@9bg4\c
eC<!teC<!teC<!teC<!t_8O@9bg4\cf%Ja0g"G'3g"G'3g"G'3_8O@9bg4\cf%Jj6gt^]?gt^]?gt^]?
_8O@9bg4\cf%Jj8hr!>Khr!>Khr!>K_8O@9bg4\cf%Jj8iT&tYj5]1[j5]1[_8O@9bg4\cf%Jj8iT'(_
k2tggk2tgg_8O@9bg4\cf%Jj8iT'(blg*m&lg*m&_8O@9bg4\cf%Jj8iT'(bm-a<0mdBN2_8O@9bg4\c
f%Jj8iT'(bm-aB6o()AB_8O@9bg4\cf%Jj8iT'(bm-aB7p%A"N_8O@9bg4\cf%Jj8iT'(bm-aB7p%eI\
_8O@9bg4\cf%Jj8iT'(bm-aB7p%eL`~>
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
gsave
433.255 590.465 mo
467.588 590.465 li
467.588 615.089 li
433.255 615.089 li
433.255 590.465 li
clp
459.047 612.738 mo
435.4 598.997 li
436.008 596.203 437.852 593.841 440.406 592.58 cv
464.714 606.458 li
462.108 607.766 460.083 610.005 459.047 612.738 cv
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 659 ]ct
[30.0413 0 0 -21.7272 434.685 67.0864 ]ct
snap_to_device
<<
/T 1
/W 21 
/H 15 
/M[21 0 0 -15 0 15 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~`5T^7`Pog8`Pog8`Pog8`Pog8`Pfd=b0%lLb0%lLb0%lLb0%lLb0%ZBb08,Tc-=MXc-=MXc-=MXc-=MO
`lcNOdF$@hdF$@hdF$@hdF$@h`5]sDcdC4keC<!teC<!teC<!teATALbg4\cf%Ja0g"G'3g"G'3g"F<`
b082Ze(34-gt^]?gt^]?gt^]'`lcNOdF6\"gtprGhr!>Khr!>K`5]sDcdC4mg"bHCj5]1[j5]1[j2As[
bg4\cf%Jj8iT'(_k2tggk2sV%b082Ze(34-hVmMWl0I[$lg*lT`lcNOdF6\"gtq#Mk3;7#mdBN2`5]sD
cdC4mg"bHCj6#UmmdTf<o#/Pjbg4\cf%Jj8iT'(bm-aB7p%?8Cb082Ze(34-hVmMWl0Rj-oC_n~>
<~`5T^7`Pog8`Pog8`Pog8`Pog8`Pfd=b0%lLb0%lLb0%lLb0%lLb0%ZBb08,Tc-=MXc-=MXc-=MXc-=MO
`lcNOdF$@hdF$@hdF$@hdF$@h`5]sDcdC4keC<!teC<!teC<!teATALbg4\cf%Ja0g"G'3g"G'3g"F<`
b082Ze(34-gt^]?gt^]?gt^]'`lcNOdF6\"gtprGhr!>Khr!>K`5]sDcdC4mg"bHCj5]1[j5]1[j2As[
bg4\cf%Jj8iT'(_k2tggk2sV%b082Ze(34-hVmMWl0I[$lg*lT`lcNOdF6\"gtq#Mk3;7#mdBN2`5]sD
cdC4mg"bHCj6#UmmdTf<o#/Pjbg4\cf%Jj8iT'(bm-aB7p%?8Cb082Ze(34-hVmMWl0Rj-oC_n~>
<~`5T^7`Pog8`Pog8`Pog8`Pog8`Pfd=b0%lLb0%lLb0%lLb0%lLb0%ZBb08,Tc-=MXc-=MXc-=MXc-=MO
`lcNOdF$@hdF$@hdF$@hdF$@h`5]sDcdC4keC<!teC<!teC<!teATALbg4\cf%Ja0g"G'3g"G'3g"F<`
b082Ze(34-gt^]?gt^]?gt^]'`lcNOdF6\"gtprGhr!>Khr!>K`5]sDcdC4mg"bHCj5]1[j5]1[j2As[
bg4\cf%Jj8iT'(_k2tggk2sV%b082Ze(34-hVmMWl0I[$lg*lT`lcNOdF6\"gtq#Mk3;7#mdBN2`5]sD
cdC4mg"bHCj6#UmmdTf<o#/Pjbg4\cf%Jj8iT'(bm-aB7p%?8Cb082Ze(34-hVmMWl0Rj-oC_n~>
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
gsave
467.588 590.465 mo
501.921 590.465 li
501.921 615.089 li
467.588 615.089 li
467.588 590.465 li
clp
467.588 590.465 mo
501.921 590.465 li
501.921 615.089 li
467.588 615.089 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 659 ]ct
[34.3329 0 0 -24.6242 467.588 68.5349 ]ct
snap_to_device
<<
/T 1
/W 24 
/H 17 
/M[24 0 0 -17 0 17 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~_8=(+_SX1,_SX1,_SX1,_SX1,_SX1,_8O=3`Pog8`Pog8`Pog8`Pog8`Pog8_8O@9b0%lLb0%lLb0%lL
b0%lLb0%lL_8O@9bg"DWc-=MXc-=MXc-=MXc-=MX_8O@9bg4\adF$@hdF$@hdF$@hdF$@h_8O@9bg4\c
eC<!teC<!teC<!teC<!t_8O@9bg4\cf%Ja0g"G'3g"G'3g"G'3_8O@9bg4\cf%Jj6gt^]?gt^]?gt^]?
_8O@9bg4\cf%Jj8hr!>Khr!>Khr!>K_8O@9bg4\cf%Jj8iT&tYj5]1[j5]1[_8O@9bg4\cf%Jj8iT'(_
k2tggk2tgg_8O@9bg4\cf%Jj8iT'(blg*m&lg*m&_8O@9bg4\cf%Jj8iT'(bm-a<0mdBN2_8O@9bg4\c
f%Jj8iT'(bm-aB6o()AB_8O@9bg4\cf%Jj8iT'(bm-aB7p%A"N_8O@9bg4\cf%Jj8iT'(bm-aB7p%eI\
_8O@9bg4\cf%Jj8iT'(bm-aB7p%eL`~>
<~_8=(+_SX1,_SX1,_SX1,_SX1,_SX1,_8O=3`Pog8`Pog8`Pog8`Pog8`Pog8_8O@9b0%lLb0%lLb0%lL
b0%lLb0%lL_8O@9bg"DWc-=MXc-=MXc-=MXc-=MX_8O@9bg4\adF$@hdF$@hdF$@hdF$@h_8O@9bg4\c
eC<!teC<!teC<!teC<!t_8O@9bg4\cf%Ja0g"G'3g"G'3g"G'3_8O@9bg4\cf%Jj6gt^]?gt^]?gt^]?
_8O@9bg4\cf%Jj8hr!>Khr!>Khr!>K_8O@9bg4\cf%Jj8iT&tYj5]1[j5]1[_8O@9bg4\cf%Jj8iT'(_
k2tggk2tgg_8O@9bg4\cf%Jj8iT'(blg*m&lg*m&_8O@9bg4\cf%Jj8iT'(bm-a<0mdBN2_8O@9bg4\c
f%Jj8iT'(bm-aB6o()AB_8O@9bg4\cf%Jj8iT'(bm-aB7p%A"N_8O@9bg4\cf%Jj8iT'(bm-aB7p%eI\
_8O@9bg4\cf%Jj8iT'(bm-aB7p%eL`~>
<~_8=(+_SX1,_SX1,_SX1,_SX1,_SX1,_8O=3`Pog8`Pog8`Pog8`Pog8`Pog8_8O@9b0%lLb0%lLb0%lL
b0%lLb0%lL_8O@9bg"DWc-=MXc-=MXc-=MXc-=MX_8O@9bg4\adF$@hdF$@hdF$@hdF$@h_8O@9bg4\c
eC<!teC<!teC<!teC<!t_8O@9bg4\cf%Ja0g"G'3g"G'3g"G'3_8O@9bg4\cf%Jj6gt^]?gt^]?gt^]?
_8O@9bg4\cf%Jj8hr!>Khr!>Khr!>K_8O@9bg4\cf%Jj8iT&tYj5]1[j5]1[_8O@9bg4\cf%Jj8iT'(_
k2tggk2tgg_8O@9bg4\cf%Jj8iT'(blg*m&lg*m&_8O@9bg4\cf%Jj8iT'(bm-a<0mdBN2_8O@9bg4\c
f%Jj8iT'(bm-aB6o()AB_8O@9bg4\cf%Jj8iT'(bm-aB7p%A"N_8O@9bg4\cf%Jj8iT'(bm-aB7p%eI\
_8O@9bg4\cf%Jj8iT'(bm-aB7p%eL`~>
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
grestore
grestore
gsave
30 0 mo
909.279 0 li
909.279 659 li
30 659 li
30 0 li
clp
gsave
409.98 554.368 mo
498.092 554.368 li
498.092 640.643 li
409.98 640.643 li
409.98 554.368 li
clp
434.654 599.328 mo
434.996 598.763 li
459.764 613.155 li
459.422 613.72 li
458.777 613.535 li
459.831 610.008 462.487 607.187 465.955 605.922 cv
466.189 606.539 li
465.851 607.106 li
440.098 592.404 li
440.436 591.836 li
440.716 592.433 li
437.867 593.713 435.838 596.338 435.316 599.435 cv
434.654 599.328 li
434.996 598.763 li
434.654 599.328 li
433.991 599.221 li
434.584 595.701 436.893 592.705 440.156 591.239 cv
440.354 591.15 440.586 591.161 440.774 591.268 cv
466.527 605.971 li
466.751 606.098 466.88 606.342 466.858 606.595 cv
466.836 606.847 466.666 607.066 466.423 607.154 cv
463.36 608.271 461.004 610.767 460.066 613.905 cv
460.007 614.1 459.862 614.257 459.668 614.331 cv
459.474 614.406 459.258 614.389 459.079 614.285 cv
434.311 599.893 li
434.074 599.755 433.946 599.487 433.991 599.221 cv
434.654 599.328 li
f
430.937 615.429 mo
430.739 614.708 429.697 614.354 428.609 614.638 cv
427.522 614.923 426.801 615.739 426.998 616.462 cv
427.195 617.184 428.237 617.538 429.324 617.251 cv
430.413 616.966 431.133 616.15 430.937 615.429 cv
cp
.867 gry
ef
430.937 615.429 mo
430.739 614.708 429.697 614.353 428.61 614.638 cv
427.523 614.923 426.801 615.739 426.999 616.462 cv
427.196 617.184 428.237 617.538 429.324 617.251 cv
430.413 616.966 431.133 616.15 430.937 615.429 cv
cp
0 gry
gsave
[1.86479 0 0 -1.82594 430.937 615.429 ]ct
@
grestore newpath
grestore
grestore
gsave
454.411 574.265 mo
476.725 586.919 li
480.425 580.19 li
484.03 574.097 481.961 566.293 475.808 562.76 cv
473.84 561.629 471.603 561.036 469.324 561.038 cv
464.766 561.502 460.677 564.016 458.228 567.863 cv
454.411 574.265 li
eclp
453.013 588.288 mo
483.596 588.288 li
483.596 559.67 li
453.013 559.67 li
cp
gsave
grestore
/-1145526216.0 
<<
/ID /-1145526216.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 21 20 ] 
/XStep 21 
/YStep 20 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 0 mo
21 0 li
21 20 li
0 20 li
cp
false sop
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 659 ]ct
[21 0 0 -20 0 659 ]ct
snap_to_device
<<
/T 1
/W 21 
/H 20 
/M[21 0 0 -20 0 20 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~aiVZHaiVZHaiVZHaiVZHaiVZHaiViScd0q`cd0q`cd0q`cd0q`cH42ReC<!teC<!teC<!teC<!teBZ1X
cICP$g=k97g=k97g=k97g!n<haj/Dhhr*GNi8EPOi8EPOhq?N)aiViXg#(iOjlPUcjlPUcj58P>cH42R
eCia>l0I[$lg*m&l/U[SeBZ1XcICP)j6?"$nF5r:mcichg!n<haj/DhhrEtho_/"Po^:u(hq?N)aiViX
g#(iSme$>Qq=O+>j58P>cH42ReCia>l0e3>r;$!Ql/U[SeBZ1XcICP)j6?"(p@e4Pmcichg!n<haj/Dh
hrEthnF5r:nF#Q$hq?N)aiViXg#(iSlg*m&lg*m$j58P>cH42ReCia>jlPUcjlPUcjl>7OeBZ1XcICP)
i8EPOi8EPOi8EPNg!n<haj/Dhg=k97g=k97g=k97g=b!$aiViXeC<!teC<!teC<!teC<!tcH42Rcd0q`
cd0q`cd0q`cd0q`cd'YSaiVZHaiVZHaiVZHaiVZHaiVZH~>
<~e'ldpe'ldpe'ldpe'ldpe'ldpe'lq$f\"j/f\"j/f\"j/f\"j/f@/4#gt^]?gt^]?gt^]?gt^]?gt1$(
fA,<CiSibSiSibSiSibSi7ur5e(<C5jlY^fk2tggk2tggjl"qGe'lq(i8s4glK[["lK[["l/gjYf@/4#
gu.;YmdKW5n*f`6mciikgt1$(fA,<Gl0e-6oCMSFo'Yc(i7ur5e(<C5jlu4(pA"FXp@@Y9jl"qGe'lq(
i8s4ko(MqYqY'LJl/gjYf@/4#gu.;Ymdg)JrVH6Ymciikgt1$(fA,<Gl0e-9q"XXXo'Yc(i7ur5e(<C5
jlu4(oCMSFoCD>6jl"qGe'lq(i8s4kn*f`6n*f`5l/gjYf@/4#gu.;YlK[["lK[["lKREggt1$(fA,<G
k2tggk2tggk2tgfi7ur5e(<C5iSibSiSibSiSibSiS`MCe'lq(gt^]?gt^]?gt^]?gt^]?f@/4#f\"j/
f\"j/f\"j/f\"j/f[nU$e'ldpe'ldpe'ldpe'ldpe'ldp~>
<~jQ,C_jQ,C_jQ,C_jQ,C_jQ,C_jQ,LekND$kkND$kkND$kkND$kkN(^elK[["lK[["lK[["lK[["lK@6h
kN_F$mHs<.mHs<.mHs<.m-<cpjQGgpn*oi9nF5r:nF5r:n*K?&jQ,Lhm-jK8o()ABo()ABnaGi0kN(^e
lKn!0o_%nMp%A"No^VD:lK@6hkN_F&nauSNq"XXZp[n"Em-<cpjQGgpn+$&EqYU0eqY0XPn*K?&jQ,Lh
m-jK:p\Oger;-0[naGi0kN(^elKn!0o_84[rquWeo^VD:lK@6hkN_F&nauSPqtp9ep[n"Em-<cpjQGgp
n+$&Eq"XXZq"OFNn*K?&jQ,Lhm-jK:p%A"Np%A"MnaGi0kN(^elKn!0o()ABo()ABo'u28lK@6hkN_F&
nF5r:nF5r:nF5r9m-<cpjQGgpmHs<.mHs<.mHs<.mHj-$jQ,LhlK[["lK[["lK[["lK[["kN(^ekND$k
kND$kkND$kkND$kkNCpejQ,C_jQ,C_jQ,C_jQ,C_jQ,C_~>
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/-1145526216.0 /Pattern get_res
[1.45627 0 0 1.43092 453.013 588.288 ]make_pattern set_pattern
ef
2 vmreclaim
grestore
gsave
409.98 640.643 mo
498.091 640.643 li
498.091 554.367 li
409.98 554.367 li
409.98 640.643 li
clp
454.411 574.265 mo
454.748 573.696 li
476.462 586.01 li
479.834 579.879 li
479.844 579.86 li
480.985 577.932 481.526 575.827 481.526 573.75 cv
481.525 569.591 479.357 565.559 475.468 563.327 cv
475.468 563.327 li
473.607 562.257 471.49 561.695 469.334 561.695 cv
469.324 561.695 li
469.324 561.038 li
469.393 561.692 li
465.044 562.134 461.138 564.534 458.798 568.211 cv
458.228 567.863 li
458.808 568.195 li
454.991 574.596 li
454.411 574.265 li
454.748 573.696 li
454.411 574.265 li
453.831 573.933 li
457.648 567.532 li
457.658 567.516 li
460.215 563.498 464.489 560.869 469.254 560.384 cv
469.323 560.38 li
469.334 560.38 li
471.729 560.38 474.08 561.005 476.147 562.193 cv
480.464 564.672 482.87 569.148 482.869 573.75 cv
482.869 576.051 482.267 578.387 481.006 580.519 cv
480.425 580.19 li
481.016 580.502 li
477.316 587.23 li
477.23 587.387 477.083 587.503 476.908 587.551 cv
476.733 587.6 476.546 587.577 476.389 587.488 cv
454.074 574.834 li
453.919 574.746 453.808 574.603 453.762 574.433 cv
453.716 574.263 453.741 574.085 453.831 573.933 cv
454.411 574.265 li
f
440.436 591.836 mo
437.417 593.257 435.265 596.043 434.654 599.328 cv
415.938 609.849 li
414.449 610.988 413.546 612.736 413.477 614.613 cv
413.492 623.823 li
415.472 629.931 420.794 634.344 427.155 635.155 cv
431.828 635.936 436.621 635.615 441.149 634.214 cv
461.163 622.669 li
465.169 624.256 469.736 622.753 472.022 619.094 cv
473.549 616.996 474.165 614.368 473.732 611.806 cv
492.21 581.138 li
494.107 574.033 491.063 566.53 484.757 562.761 cv
473.999 558.056 li
466.508 556.772 458.998 560.218 455.079 566.737 cv
440.436 591.836 li
1.5 lw
gsave
[1.86479 0 0 -1.82594 440.436 591.836 ]ct
@
grestore newpath
grestore
gsave
447.135 592.924 mo
451.384 595.298 li
453.673 591.288 li
449.423 588.915 li
447.135 592.924 li
452.733 595.912 mo
456.983 598.285 li
459.271 594.275 li
455.021 591.902 li
452.733 595.912 li
458.331 599.063 mo
462.581 601.437 li
464.869 597.425 li
460.619 595.053 li
458.331 599.063 li
461.559 593.702 mo
465.809 596.076 li
468.099 592.066 li
463.849 589.692 li
461.559 593.702 li
455.961 590.552 mo
460.211 592.924 li
462.499 588.915 li
458.249 586.541 li
455.961 590.552 li
450.362 587.565 mo
454.612 589.937 li
456.901 585.927 li
452.651 583.554 li
450.362 587.565 li
453.509 582.491 mo
457.758 584.865 li
460.048 580.853 li
455.798 578.481 li
453.509 582.491 li
464.707 588.628 mo
468.956 591.002 li
471.245 586.992 li
466.995 584.618 li
464.707 588.628 li
459.108 585.478 mo
463.358 587.852 li
465.646 583.84 li
461.397 581.468 li
459.108 585.478 li
eclp
gsave
445.736 602.806 mo
472.643 602.806 li
472.643 577.111 li
445.736 577.111 li
445.736 602.806 li
eclp
gsave
445.736 551.417 mo
472.643 551.417 li
472.643 577.112 li
445.736 577.112 li
445.736 551.417 li
clp
grestore
gsave
445.736 577.112 mo
472.643 577.112 li
472.643 602.806 li
445.736 602.806 li
445.736 577.112 li
clp
462.581 601.437 mo
458.331 599.063 li
460.619 595.053 li
464.869 597.425 li
462.581 601.437 li
456.983 598.285 mo
452.733 595.912 li
455.021 591.902 li
459.271 594.275 li
456.983 598.285 li
465.809 596.076 mo
461.559 593.702 li
463.849 589.692 li
468.099 592.066 li
465.809 596.076 li
451.384 595.298 mo
447.135 592.924 li
449.423 588.915 li
453.673 591.288 li
451.384 595.298 li
460.211 592.924 mo
455.961 590.552 li
458.249 586.541 li
462.499 588.915 li
460.211 592.924 li
468.956 591.002 mo
464.707 588.628 li
466.995 584.618 li
471.245 586.992 li
468.956 591.002 li
454.612 589.937 mo
450.362 587.565 li
452.651 583.554 li
456.901 585.927 li
454.612 589.937 li
463.358 587.852 mo
459.108 585.478 li
461.397 581.468 li
465.646 583.84 li
463.358 587.852 li
457.758 584.865 mo
453.509 582.491 li
455.798 578.481 li
460.048 580.853 li
457.758 584.865 li
/2 
[/DeviceCMYK] /CSA add_res
/2 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 659 ]ct
[24.5116 0 0 -23.361 446.968 80.7605 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 102 
/H 100 
/M[102 0 0 -100 0 100 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 102 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 102 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 102 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 102 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
Rr7FnZs(d[c!.UYjo_/f!GHA@;ug+e<O5[*>L<Jq!<<53B]Wn-DP'o-;ug*l<<-7i!O2Y*"4Lr+BE2q]
<9$pX>+nso<<-6n!<<5iBWl(LDUh_-;ug+7<T-pX>GD5q!<<4lBE2r><39+">1Zco<<-7;!T*nX"/T]+
BE2q?;ug+m<NB+">M0%q!<<5;?K5AhBE2qJ9`.T];ug*r:&@oj>P%p!!;ccs"5@/'?MeC9DSf*+9`%ch
>,b6m:&@oj>G;,p!<<5q?EIQ2BE2r+9?'X%;ug+?:#A\B<<-7(!;HQk!<<4r?MeC9DWja*9D_Zg>0fpm
:&@oj>IFP!!;ccs"/9-"BE;daU.bA_!*\Y^\P;s$!*dhNdK'.F!!B`;lX'I%!,eN(r`&kr!*Z*kqc*W#
li=KpqZ-[!doP%#qd0/5!,fA:mm[+Hqc!Q!W(-YY!*/qs!*c/tqZ-[!mT-r#qd0/5!,g=Ue4'7-qc!Q!
]LM9Xqb?rf!*c2u!!)ls!!B0#qd0/5!,h9p\OHBgqc!Q!f1+1Xqb?rf!*d/;jT,/Y!!B0#ra,S1qe,tI
W($SVqc!Q!nj^)Xqb?rf!*e+VaoM;>!!C#;kuR[fqe,tIW'p\Zr(Hod!*Z<jqb?rf!*f'qY5nG#!!CtV
c;sgKqe,tI_F<WVqb-fc!*Z?k!(Qi[qc*W#U&b&k!!Dpk\PW0(qd0/5!,gUWdQdUtqb-fc!*[<+lTk>:
qb?rf!*cK(p]10l!!BB#qc<T#qe,tIkWd*PqaLBTqc!Q!cTpDRqaUHWqc*W#[K,[pqZ-[!Y#,!rqd026
!GHAR5PmnH9D_Zg>3\Al5l4%J:&@oj>L<H!!;ccs"1V2%;#=;j?MeC9DQZ5$7JfaW<;ohs>-:-f7f,pW
<<-7i!4Mt*!<<5N:u"nE<r65#BE2q]5P78<7JfaT;ug+)5l4%J9`S2k<<-6t!;ccs"7B"%;#=;j?MeC9
DUgu*5PmnH9D_Zg>.d,l5l4%J:&@oj>GD/u!;ccs"9(j)8,GmT;#=;j?MeC9DX]X/3;Yc65PmnH9D_Zg
>1Ydq3Vto85l4%J:&@oj>J:+!!;ccs"9(j)8,GmT;#=;m?N+:.BE2q]3;Yc65PmnH9D_Zg>4O\q3Vto8
5l4%J:&@oj>M0#!!;ccs"9(j/8,GgR8c)?]<r65#BE2q]3;Y`55PmkL9DhH[;ug+53Vtl75l4%J:&@oj
>P%p!!;ccs"9(jJ8)Qo78c)?]<r65#BE2qe3;GQ23Vu&<7JfaT;ug+53Vtl75l=(O7f,pW<<-6t!;ccs
"9(je8&\!q8c)?]<r65#BE2r+38QXl3Vu&<7JfaT;ug+?3VPQ23r;2>7f,pW<<-7(!;HQk!<<6$8A.Oj
8c)?]<r65#BE2r637Bka3Vu&<7JfaT;ug+J3UAd'3r;2>7f,pW<<-73!:9d`!<<6$8A.Oj8c)?]<r65$
BE;da\iBRIq`jsHqb-fc!*\YJd5h(bq`t$Jqb?rf!*dhNdK'.F!!E3e_En)ds%*)ZqbR)iqd')4!,h?`
c8,;Sq`4O<qaC<Sr`&kr!*\qNc8>GVq`=U>qaLBVqc*W#li=KpqZ-[!r^,1%m6UY:qagT[qc<T"qe,tI
nh\QHr&":2q`jsGqb-fc!*\qNc8>GVq`=U>qaLBV!*/qs!*c/tqZ-[!r^--@dR!dtqagT[qc<T"qe,tI
nh]>^lSAApq`4O<qaC<Sqc!Q!nhn]Lr\a^5q`=U>qaLBVqc*W#UAt8oqZ-[!r^+Ifr'L9OqbR)iqd')4
!,h?`s"_qVr&":2q`jsGqb-fc!*\qNjtu<Zr&+@4q`t$Iqb?rf!*d/;jT,/Y!!E3e_En)dqagT[qc<]%
ra#D7!,h?`c8,;Sq`4O<qaC<Sqc!Q!nhn]Lr&+@4q`t$Iqb?rf!*e+VaoM;>!!E3e_a+8gr'L9OqbR)i
qd')4!,h?`c8,;Sq`4O<qa:EWr(Hod!*\qNc8>GVq`=U>qaLBVqc*W#oDl&pqZ-[!r]BU1mlB\oq`F^B
qagT[qc<T"qe,tInh/EDr\"1&r&":2q`jsGqb-fc!*\qHe1UVOr&+@4q`t'J!(HcZqc*W#U&b&k!!E3^
q)\:3ffApkr'L9OqbR)iqd')4!,h?[ln.HRq_%e'q`4O<qaC<Sqc!Q!nh8KF!&+7'r&+@4q`t$Iqb?rf
!*cK(p]10l!!E3^n2f5_q`F^BqagT[qc<T"qe,tInh0YghC\UWr&":2q`jsGqb-fc!*\qHhCeOTq_.k)
q`=U>qaLBVqc*W#[K,[pqZ-[!r]BU1ffApkr'L9OqbR)iqd',5!GHBA0%;KM0)RR'3Vu&<7/KXS;ug+m
0DR6U0)I="2>]H35l4"I:&@oj>L<H!!;ccs"9(CO3nZOj48_GF8Gu*V:]"2i?2J:8DXoF0/c.0u2#B<1
5PmkG9E%oi;ug+m0@VWO0Dm^)3r;2>7JfgV<<-7i!4Mt*!<<6$47G;o3V,9.48_GB8Gc3[<r62"BE2r@
0%;KM0)RR'3Vu&<7/KXS;ug+m0@VWO0Dm^)3r;2>7JfdZ<W#hs>G;,p!<<5m2>oB.2!$Oj2>]H46Mj=N
:]"2i?2J:8DXo7;./,.e.Jkaq2#B<15PmkG9D_Zg>5g&F.bZ?K.f1mu2?,Q23r;2>7JfgV<<-6u!!!#r
!<<5m2>/lg1]'',3rD>A8Gc3[<r62"BE2r@.K:gO./PIj0)RR'3Vu&<7/KXS;ug,$/+kCS.J5.e.f1ms
2>]H35l4"I:&@oj>J:+!!;ccs"7e>C2!$Oj2>]H46Mj=N:]"2l?2e.,BE2r@.G?3I.Jkaq2#B<15PmkG
9D_Zg>5g&F.bZ?K.f1ms2>]H35l4"I:&@oj>M0#!!;ccs"7e>C2!$Oj2>fK83rD>A8Gc3[<r62"BE2r@
.G?3I.Jkaq2#B<15PmhK9DhH[;ug,$/+kCG.JkUl0Dm^)3r;2>7JfgV<<-7q!3ZD"!<<5m2>/m"1\!9u
2>]H46Mj=N:]"2i?2J:8DXo71./PIm0)dL$2#B<15PmkG9D_Zg>5g&F.bZ?K.f1ms2>]H35l=%N7JfgV
<<-6t!;ccs"84VN2>/lg1]'',3rD>A8Gc3[<r62"BE2r@.I8JO./PIj0)RR'3Vu&<7/KXS;ug,$/+kCG
.JkRp0DmL$2>]H35l4"I:&@oj>H7c!!;ccs"9(%J0_R0s0(COj1&Eg)3rD>A8Gc3[<r62"BE2rL-M8\Z
,QK+U,Prhb.Jkaq1]'305PmkG9D_Zg>5foB-MAbO,l]7j-i5Cj0Dm[(3r;2>7JfgV<<-73!:9d`!<<6$
1%d6o0DdBl/c.:"2#B?36Mj=N:]"2i?2S@:BQ!erod0;WlQc9Rq^MCpr%n41q`jsGqb-fc!*]@Lod9J\
r[$kUq^;7jq_.k(q`=U>qaLBVqc*W#d/_SpqZ-[!r\=("p+Q:qnLaVmq_\12r'LESrCHf]qc<T"qe,tI
r[.:ap*ArKq^21hq_%e&q`4O<qaC<Sr`&kr!*]@Lod9AYlQl?Tq^VIrr&":3q`t$Iqb?rf!*edi[fH:+
!!E3Toe?(mq_%Ils"4+&q_\12r'L9OqbR)iqd')4!,hc_od0;WlQc9Rq^MCpr%n41q`jsGqb-fc!*]@L
od9AYlQl?Tq^VIrr&":3q`t$Iqb7&jr)E`$U&b&k!!E3Toe?=tqCh^unLaVmq_\12r'L9OqbR)iqd')4
!,hc_od0;Wmj%cUq^21hq_%e&q`4O<qaC<Sqc!Q!r[7@cp*K#Mq^;7jq_.q*s"sU6q`t$Iqb?rf!*c2u
!!)ls!!E3Toe?(mq_%Cjq_@t)q`=XAqagT[qc<T"qe,tIr[.:as!7@blQc9Rq^MCpr%n41q`jsGqb-fc
!*]@Lod9AYnKduWq^;7jq_.k(q`=U>qaLBVqc*W#^&[6pqZ-[!pal+hod]hfr@%Onq_@t)q`4R?qa^NZ
qc3W$ra#D7!,hc[n0.HIpE08Uq^)+gq^q_%q`+I:qaC<Sqc!Q!rZh([r$(eWpE9>Wq^21iq_%e'q`4O<
qaLBVqc*W#f`9.pqZ-[!pal+hod]hfr@%Onq_@t)r&Fa;r'C3MqbR)hqd')4!,hc[n0.HIpE08Uq^)+g
q^q_%q`+I:qa:EWr(Hod!*]@Hn07NKpE9>Wq^21iq_%e'q`4O<qaLBVqc*W#oDl&pqZ-[!pal+hod]hf
r@%Onq_@t)q`4R?qa^NZqc3N!qe,tIrZ^hTocWuNq]Yh_q^MLrr[n%(q`+I:qaC<Sqc!Q!rZgnVoca&P
q]bnaq^VIqr&":2q`k!I!(HcZqc*W#U&b&k!!E!Is"!jpod]hfr@%Onq_@t)q`4R?qa^NZqc3N!qe,tI
rZ^hTocX2Tq]G\Yq^)+gq^q_%q`+I:qaC<Sqc!Q!rZgnVoca&Pq]bnaq^MRur%@n(q`4O<qaLBVqc*W#
WrVnpqZ-[!pal+hod]hfr@%Onq_@t)q`4R?qa^NZqc3N!qe,tIrZ^hTr#khYpE08Uq^)+gq^q_%q`+I:
qaC<Sqc!Q!rZgnVoca&Pq]c%er?hCkq_%e'q`4O<qaLBVqc*W#[K,[pqZ-[!pal+hod]hfr@%Onq_@t)
q`4R?qa^NZqc3N!r+H+EDZ1jL+nZuP+8[5Y-2T.g/c7F%3;Yo:7/KXS;ug,$,OcoV+o!5T+T!A[-Mo:i
0)RR'3Vu&<7JfgV<<-7N!7ClE!<<6$..nt]-Mo+f,l]7j-Mo=j0`*['3W)2C8,YsT:]"/h?2J:8DZ1aN
*qgWK*<.)Y*W%#W-2T+f/c7F%3;Yo:7/KXV<;ohs>5fZ;+8-cM*WI5[*r@/Y-Mo7h0)RR'3Vu&<7JfdU
<<-7i!4Mt*!<<6$..nt]-Mo+f,l]7j-N,Ip/,M$t1]'3162O1L:]"/h?2J:8DZ1aN*qgWK*<.)Y*W%#W
-2T+f/c7F%3;Yo:7/KXS;ug,$+S?iM*qp]T+8m8X,5W_a.Jkaq2#B<15PmnH9E8)j<<-6t!;ccs"9'_A
-iGCg-Mo+f,l]7j-Mo=j0`*['3W)2?8,H*Z<Vp)!BE2rL+8$]K*VUQR*rR,Z+oNS]-2T+f/c7F%3;Yo:
7/KXS;ug,$+S?iM*qp]T+8m8X,5W_a.Jkas2#fE03Vu&<7JfdU<<-6u!!!#r!<<6$..nt]-Mo+f,l]7j
-Mo=j0`*['3W)2?8,H*Z<Vp)!BE2rL+8$]T*V^ZL*<.)Y*W%#W-2T+f/c7F%3;Yo:7/KXS;ug,$+S?iM
*qp]T+8m8X,5W_a.Jkaq2#B<15PmnH9`%fi>J:+!!;ccs"9'_A-h\na-2f+h-iGCh/,M$t1]'3162O1L
:]"/k?2e.,BE2rL+8$]K*VUQR*rR,V+o<S_./PUo1]'0/55RbF9D_Zg>5fZ;+8-cM*WI5[*r@/Y-Mo7h
0)RR'3Vu&<7JfdU<<-7V!6P<=!<<6$..nt]-Mo+f,l]7j-Mo=j0`*[(3<2);62O1L:]"/h?2J:8DZ1aN
*qgWK*<.)Y*W%#W-2T+f/c7F%3;Yo:6i]mX9D_Zg>5fZ;+8-cM*WI5[*r@/Y-Mo7h0)RR'3Vu&<7JfdU
<<-7q!3ZD"!<<6$,l8h[,5WP^+TE\b,6'%h-Mo=j0`*['3W)2?8,H*Z<Vp)!BE2rL)tb-C)>tEP)uU]T
*rR,V+o<S_./kgt/c7F%3;Yo:7/KUR;ug,$*VCEM)tt9N*;piV+8m8X,5W_a.Jkaq2#B<15Q!qM7JfdU
<<-6t!;ccs"9'SC,QAt_,5WP^+TE\b,6'%h-Mo=j0`*['3W)2?8,H*Z<Vp)!BE2rL)tb-C)>tEP)uU]T
*rR,V+o<S_./PUo1]'0/55RbF9)DQf>5fQ8*;gcM)ZLfU)uh#Y*r@/Y-Mo4l0)R@"2#B<15PmnH9`%fi
>H7c!!;ccs"9'SC,PE>Y+oNP`,Q/hd-iGCh/,M$t1]'3162O1L:]"/h?2J:8DZ1UJ)YY*L)>tEP)uU]T
*rR,V+o<S_./PUo1]'0/55RbF9)DQf>5fQ8*;gcM)ZLfU)uh#Y*r@/]-N,:g.Jkaq2#B<15PmnH9`%fi
>IFP!!;ccs"9'SC,PE>Y+oNP`,Q/hd-iGCh/,M$t1]'3162O1L:]"/h?2S@:BQ!egoc!NAr>>PRr>P\W
r>kbYq^)+fq^q_%q`+I:qaC<Rqc!Q!rZ1YOr#>VRqATARr>YbYr>th[q^21hq_%e'q`4O<qaLBUqc*W#
d/_SpqZ-[!rZq@cp*0AWr?2+br?D7hr?hClq_7n'q`4R?s%!#XqbR)hqd')4!,hcToc!NAr>>PRr>P\W
r>kbYq^)+fq^q_%q`+I:qaC<Rr`&kr!*]@Boc3lKpDX&Or>YbYr>th[q^21hq_%e'q`4O<qaLBUqc*W#
li=KpqZ-[!rZq@cp*0AWr?2+br?D7hr?hIns"!t#q_S+0r'C3MqbR)hqd')4!,hcToc!NAr>>PRr>P\W
r>kbYq^)+fq^q_%q`+I:qaC<Rqc!Q!rZ1YOr#>AKruCtVru_1\q]bnaq^MCpr&":2q`jsHqb-uir)E`$
U&b&k!!E3Eoca8V!$M4^q]Pn`r?D7hr?hClq_7n'q`+L>qa^NYqc3Muqe,tIrYbAGr"o;Iq\]>Pr>P\W
r>kn]r?;%aq^D=mr%n40q`amFqb$`b!*]@@oc!`Gr>>DLruCtVru_1\q]bnaq^MCor\XX3q`4O<qaLBU
qc*W#UAt8oqZ-[!rZ_"Yr#kq[q]Pn`r?D7hr?hClq_7n'q`+L>qa^NYqc3Muqe,tIrYbAGrtkYNr>,8I
ru:nTruV+Zq]Yh_q^D=mr%n40q`amFqb$`b!*]@@oc!`Gr>>DLruCtVru_1\q]bnaq^MCor&":2q`jsH
qb6le!*d/;jT,/Y!!E3Eoca5Ur?(nZs!.Ids!Ralq^_Otq_S+/r'C3MqbI#gr`oG-qe,tIrYbAGr"o;I
q\]>Pr>P\Wr>kbYq^)+fq^hY$q`+I:qaC<Rqc!Q!rYtMKr#,GMq\fDRr>YbYr>th[q^21hq^q_&q`4O<
qaLBUqc*W#f`9.pqZ-[!rZ_"Yr#kq[q]Pn`r?D7hr?hClq_7n'r&=[9r'C3MqbI#gqcs#3!,hcRobdTC
r>,8Iru:nTruV+Zq]Yh_q^D=mr%n40q`amF!)!/]qc!Q!rYtMKr#,GMq\fDRr>YbYr>th[q^21hq^q_&
q`4O<qaLBUqc*W#oDl&pqZ-[!rZ_"Yr#kq[q]Pn`r?D7hr?hClq_7n'q`+L>qa^NYqc3Muqe,tIrYbAG
r"o;Iq\]>Pr>P\Wr>kbYq^)+fr[e%"r%n40q`amFqb$`b!*]@@oc!`Gr>>DLruCtVru_1\q]bnaq^MCo
r&":2q`k!I!(HcYqc*W#U&b&k!!E3Eq'#\[r#kq[q]Pn`r?D7hr?hClq_7n'q`+L>qa^NYqc3Muqe,tI
rYbAGr"o;Iq\]>Pr>P\Wr>kbYq^)+fq^hY$q`+I:qaC<Rqc!Q!rYtMKr#,GMq\fDRr>YbYr>th[q^21h
!%n+#r&":2q`jsHqb6le!*cK(p]10l!!E3Boc=#Oruh7^q]Pn`r?D7hr?hClq_7n'q`+L=qaUHXqc3Mu
qe,tIrYP5CrY>GLr>#AMr##GQr>P\Wr>kbYq^)+fq^hY#q`+I:qaC<Rqc!Q!rYY;DrY>GNr>>DLruCtV
ru_1\q]c%er?hCjq^q_%q`4O<qaLBUqc*W#[K,[pqZ-[!rZCeRrZ(q\r?(nZs!.Ids!Ralq^_Otq_S+/
r':-KqbI#gqcs&4!GHBM(\JRC(&o*K(AesK)uU]T*rR,V+o<S_./PRn1Aa'.55RbF9)DQf>5fB3(B,'K
)?(HQ)#G3N*;piV+8m8X,5W_a.Jk^p1]'305PmnH9`%fi>L<H!!;ccs"9'D8*W@&Y+T3DZ+TE\b,6'%h
-Mo=j0`*['3;c&A7f>gR:A\&g>l/17DZ1IF(B,'K(]>-H)#kQR)ZLlW*W%#W-2T+f/Gq:#3;Yo:7/KUU
<;ohs>5fB3(B,'K)>tEL)?1]T)uh#Y*r@/Y-Mo7h/c7F%3Vu&<7JfdU<<-7i!4Mt*!<<6$+8$ZR*<./[
+8[2\,Q/hd-iGCj/,q-s0`*['3;c&=7f,sX<Vp%uBE2rL(\JRC(&o*K(AesK)uU]T*rR,V+o<S_./PRn
1Aa'.55RbF9)DQf>5fB3(B,'K)>tEL)?1]T)uh#Y*r@/Y-Mo7h/c7F%3Vu&<7JfaY<W#hs>G;,p!<<6$
+8$ZR)uq)]+T3DZ+TE\b,6'%h-Mo=j0`*['3;c&=7f,sX<Vp%uBE2rL(\JRC(&o*K(AesK)uU]T*rR,Z
+oNS]-2T+f/Gq:#3;Yo:7/KUR;ug,$)"e[D(&o0M)#G3N*;piV+8m8X,5W_a.Jk^r1]K9.3Vu&<7JfdU
<<-6u!!!#r!<<6$+8$ZR*<./[+8[2\,Q/hd-iGCh/,M$t1]'005l4%J:A\&g>l/17DZ1IF(B5*N'c.\b
(AesK)uU]T*rR,V+o<S_./PRn1Aa'.55RbF9)DQf>5fB3(B,'K)>tEL)?1]T)uh#Y*r@/Y-Mo7h/c7F%
3Vu&<7JfdU<<-7;!9F4X!<<6$)YY-L*W@&Y+T3DZ+TE\b,6'%h-Mo=j0`*['3;c&=7f,sX<W68&>l/17
DZ1@E'E8jI(&o*K(AesK)uU]T*rR,V+o<S_./PRn1Aa'.55RbF9)DQf>5f92'E8jI(&o0M)#G3N*;piV
+8m8X,5W_a.Jk^p1]'305PmnH9`%fi>M0#!!;ccs"9'55)?1`V*<./[+8[2\,Q/hd-iGCh/,M$t1]034
3;c&=7f,sX<Vp%uBE2rL'_`:@(B,'K(]>-H)#kQR)ZLlW*W%#W-2T+f/Gq:#3;Yo:6i]jW9)DQf>5f92
'E8jI(&o0M)#G3N*;piV+8m8X,5W_a.Jk^p1]'305PmnH9`%fi>P%p!!;ccs"9'55)?1`V*<./[+8[2\
,Q/hd-iGCh/,M$t1]'005l4%J:A\&g>l/17DZ1@E'E8jI(&o*K(AesK)uU]T*rR,V+o<S_./kds/Gq:#
3;Yo:7/KUR;ug,$(&&CA(B,'K)>tEL)?1]T)uh#Y*r@/Y-Mo7h/c7F%3Vu&=70#dR9`%fi>G;,p!<<6$
)Yk9N)?1`V*<./[+8[2\,Q/hd-iGCh/,M$t1]'005l4%J:A\&g>l/17DZ1@E'E8jI(&o*K(AesK)uU]T
*rR,V+o<S_./PRn1Aa'.55RbF9)DQf>5f92'E8jI(&o0M)#G3N*;piV+8m8X,5W_a.0(st/c7F%3Vu&<
7JfdU<<-7(!;HQk!<<6$)YY-L*W@&Y+T3DZ+TE\b,6'%h-Mo=j0`*['3;c&=7f,sX<Vp%uBE2rL'_`:@
(B,'K(]>*L)#P6N)uU]T*rR,V+o<S_./PRn1Aa'.55RbF9)DQf>5f92'E8jI(&o0M)#G3N*;piV+8m8X
,6'"g-Mo7h/c7F%3Vu&<7JfdU<<-73!:9d`!<<6$)YY-L*W@&Y+T3DZ+TE\b,6'%h-Mo=j0`*['3;c&=
7f,sX<Vp&!BE;darY5)?rtbSKrtkVLq\]>Pr>P\Wr>kbYq^)+fq^hY#q`+I:qaC<Rqc!Q!rY>/@rtbSK
ru(eQ!#YSNruCtVru_1\q]bnaq^MCor%n41q`jsHqb6le!*dhNdK'.F!!E3=pDNuOrZ(q\r?(nZs!.Id
s!Ralq^_Otq_S+/r':9OrC6ZZqc3Muqe,tIrY5)?rtbSKrtkVLq\]>Pr>P\Wr>kbYq^)+fq^hY#r]'m9
q`amEqb$ier_rl$rY>/@rtbSKru(bPq\fDRr>YbYr>th[q^21hq^q_%r]0s;q`jsGqb6le!*edi[fH:+
!!E3=pDNuOrZ(q\r?(nZs!.Ids!Ralr@@muq_7n'q`+L=qaUHXqc3Muqe,tIrY5)?rtbSKrtkVLq\]>P
r>P\Wr>kbYq^)+fq^hY#r]'m9q`amEqb$`b!*]@:pCmQBrY>GNr>>DLruCtVru_1\q]bnaq^MCor%n=4
r]'d>qaC<T!*/qs!*c/tqZ-[!rYkMKruM(Y!$D7ar?(nZs!.Ids!Ralq^_Otq_S+/r':-KqbI#gqcs#3
!,hcMpCmQBrY>GLr>,8Iru:nTruV+Zruq=aq^)+fq^hY#r]'m9q`amEqb$`b!*]@:pCmQBrY>GNr>>DL
ruCtVru_1\q]bnaq^MCor\OR1r]0s;q`jsGqb6le!*c2u!!)ls!!E3=pDNuOrZ(q\r?(nZs!.Ids!Ral
q^_Otq_S+/r':-KqbI#gqcs#3!,hcMpCmQBrtPSM(Dm#cq\]>Pr>P\Wr>kbYq^)+fq^hY#r]'m9q`amE
qb$`b!*]@:pCmQBrY>GNr>>DLruCtVru_1\q]bnaq^MCor%n=4r]'d>qaC<Tqc*W#^&[6pqZ-[!rYkMK
ruM(Yruh7^q]Pn`r?D7hr?hClq_7n'q`+L=qaUHXqc3W#r`o>6!,hcMpCmQBrY>GLr>,8Iru:nTruV+Z
q]Yh_q^D=mr%e72r\s^<qa:6Qqc!Q!rY>/@rtbSKru(bPq\fDRr>YbYr>th[q^21hq^q_%r]0s;q`jsG
qb6le!*e+VaoM;>!!E3=pDNuOrZ(q\r?(nZs!.Ids!Ralq^_Otq_S.0!''mAqaUHXqc3Muqe,tIrY5)?
rtbSKrtkVLq\]>Pr>P\Wr>kbYq^)+fq^hY#r]'m9q`amE!)!/]qc!Q!rY>/@rtbSKru(bPq\fDRr>YbY
r>th[q^21hq^q_%r]0s;q`jsGqb6le!*f'qY5nG#!!E3=pDNuOrZ(q\r?(nZs!.Ids!Ralq^_Otq_S+/
r':-KqbI#gqcs#3!,hcMpCmQBrY>GLr>,8Iru:nTruV+Zq]Yh_q^DFpr[dt&r]'m9q`amEqb$`b!*]@:
pCmQBrY>GNr>>DLruCtVru_1\q]bnaq^MCor%n=4r]'d>r'UNQqb6le!*c/tqZ-d$(`F=g)?1TS*W@&Y
+T3DZ+TE\b,6'%h-Mo=j0`*['3;c&=7f,sX<Vp%uBEN,b'GU9TrtbSKrtkVLq\]>Pr>P\Wr>kbYq^)+f
q^hY#r]'m9q`amEqb$`b"'Q?Q(&&CA(B,'K)>tEL)?1]T)uh#Y*r@/Y-Mo4l/c73u1]BE63;Yr;7/K[T
<<-7(!;HQk!<<4P~>

%%EndBinary
grestore
np
grestore
grestore
grestore
461.518 596.779 mo
463.153 597.681 li
463.317 598.417 li
462.499 599.971 li
455.92 593.629 mo
457.555 594.529 li
457.717 595.265 li
456.901 596.821 li
450.322 590.642 mo
451.957 591.542 li
452.119 592.278 li
451.302 593.833 li
453.549 585.281 mo
455.185 586.181 li
455.347 586.919 li
454.53 588.473 li
456.697 580.206 mo
458.331 581.107 li
458.495 581.844 li
457.678 583.398 li
462.295 583.194 mo
463.929 584.094 li
464.093 584.832 li
463.276 586.385 li
467.893 586.345 mo
469.527 587.245 li
469.691 587.981 li
468.874 589.537 li
459.148 588.268 mo
460.783 589.168 li
460.947 589.906 li
460.128 591.46 li
464.748 591.42 mo
466.381 592.32 li
466.545 593.056 li
465.728 594.611 li
1 gry
gsave
[1.86479 0 0 -1.82594 461.518 596.779 ]ct
@
grestore newpath
gsave
0 659 mo
910 659 li
910 0 li
0 0 li
0 659 li
clp
115.425 392.855 mo
107.231 396.239 li
67.2423 298.464 li
66.3513 298.464 li
26.3623 396.239 li
18.1683 392.855 li
60.3843 289.558 li
73.2093 289.558 li
cp
.353 .353 .353 rgb
f
51.9234 318.25 mo
81.6704 318.25 li
81.6704 327.156 li
51.9234 327.156 li
cp
f
106.697 372.667 mo
101.086 379.614 li
66.7966 352.183 li
32.5086 379.614 li
26.8976 372.667 li
59.6716 346.482 li
45.4216 335.083 li
51.0326 328.136 li
66.7966 340.783 li
82.5616 328.136 li
88.1726 335.083 li
73.9216 346.482 li
cp
f
66.7969 318.25 mo
81.6699 318.25 li
81.6699 327.156 li
66.7969 327.156 li
cp
.267 .267 .267 rgb
f
101.086 379.614 mo
66.7966 352.183 li
66.7966 340.783 li
82.5616 328.136 li
88.1726 335.083 li
73.9216 346.482 li
106.697 372.667 li
cp
f
16.1034 329.274 mo
5.7184 317.171 .000398636 301.738 .000398636 285.817 cv
.000398636 271.805 4.3094 258.381 12.4594 247 cv
19.7044 252.183 li
12.6374 262.047 8.9064 273.675 8.9064 285.817 cv
8.9064 299.611 13.8634 312.988 22.8614 323.473 cv
cp
0 .671 .914 rgb
f
117.49 329.274 mo
110.732 323.473 li
119.73 312.988 124.687 299.611 124.687 285.817 cv
124.687 273.675 120.956 262.047 113.889 252.183 cv
121.134 247 li
129.284 258.381 133.593 271.805 133.593 285.817 cv
133.593 301.738 127.875 317.171 117.49 329.274 cv
cp
0 .584 1 rgb
f
29.6237 317.685 mo
22.0087 308.809 17.8127 297.494 17.8127 285.817 cv
17.8127 275.541 20.9737 265.696 26.9537 257.35 cv
34.1897 262.534 li
29.3017 269.362 26.7187 277.411 26.7187 285.817 cv
26.7187 295.367 30.1497 304.626 36.3817 311.884 cv
cp
0 .671 .914 rgb
f
103.97 317.685 mo
97.2121 311.884 li
103.444 304.626 106.875 295.367 106.875 285.817 cv
106.875 277.411 104.292 269.362 99.4041 262.534 cv
106.64 257.35 li
112.62 265.696 115.781 275.541 115.781 285.817 cv
115.781 297.494 111.585 308.809 103.97 317.685 cv
cp
0 .584 1 rgb
f
43.1398 306.099 mo
38.2948 300.454 35.6248 293.254 35.6248 285.816 cv
35.6248 279.28 37.6338 273.014 41.4388 267.701 cv
48.6838 272.884 li
45.9668 276.676 44.5308 281.151 44.5308 285.816 cv
44.5308 291.126 46.4358 296.268 49.8978 300.298 cv
cp
0 .671 .914 rgb
f
90.4542 306.099 mo
83.6962 300.298 li
87.1582 296.268 89.0622 291.126 89.0622 285.816 cv
89.0622 281.151 87.6272 276.676 84.9092 272.884 cv
92.1542 267.701 li
95.9592 273.014 97.9692 279.28 97.9692 285.816 cv
97.9692 293.254 95.2982 300.454 90.4542 306.099 cv
cp
0 .584 1 rgb
f
29.6578 371.688 mo
103.936 371.688 li
103.936 380.594 li
29.6578 380.594 li
cp
.353 .353 .353 rgb
f
66.7969 371.688 mo
103.936 371.688 li
103.936 380.594 li
66.7969 380.594 li
cp
.267 .267 .267 rgb
f
115.425 392.855 mo
107.231 396.239 li
67.2423 298.464 li
66.7973 298.464 li
66.7973 289.558 li
73.2093 289.558 li
cp
f
8.9062 390.094 mo
124.687 390.094 li
124.687 399 li
8.9062 399 li
cp
0 .8 .443 rgb
f
66.7969 390.094 mo
124.688 390.094 li
124.688 399 li
66.7969 399 li
cp
0 .671 .369 rgb
f
66.7969 272.458 mo
59.4049 272.458 53.4379 278.425 53.4379 285.817 cv
53.4379 293.21 59.4049 299.177 66.7969 299.177 cv
74.1889 299.177 80.1559 293.21 80.1559 285.817 cv
80.1559 278.425 74.1889 272.458 66.7969 272.458 cv
cp
0 .671 .914 rgb
f
80.1563 285.817 mo
80.1563 293.21 74.1893 299.176 66.7973 299.176 cv
66.7973 272.458 li
74.1893 272.458 80.1563 278.425 80.1563 285.817 cv
cp
0 .584 1 rgb
f
37.2969 424 mo
96.2969 424 li
96.2969 477 li
37.2969 477 li
cp
1 1 1 rgb
f
0 gry
%ADOBeginSubsetFont: PBAAAA+ArialMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /PBAAAA+ArialMT def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 65 /A putdup 80 /P putdef/FontBBox {-665 -325 2000 1006} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A936AA182F5809A9> |-/A <1C60D8A8C9B64EDFED26B9E21A4F64848088903AC9891CF791BDBC4AB29ACC8B3E8D13924A7DDE35F09AC5F4A8229C87124C732743268600EF8D4582208BD16D82> |-/P <1C60D8A8C9B64EDFF4950CC53012D47AE97D5586315BA2F5162B63CEC117C5379A1B3DB174CB2C739C68916A1E99A346AFF71DBF25658867D9AEF1BF3C47CE1BA73978E8D0D40E52B85A56E08A1369D85E15B0A0C517291916FF6E61D0EFBF59B4862165C7DEA15B42BE3811C2CAA25C54> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IUFDTN+ArialMT /PBAAAA+ArialMT findfont ct_VMDictPut/IUFDTN+ArialMT*1 [65{/.notdef}rp /A 14{/.notdef}rp /P 175{/.notdef}rp]IUFDTN+ArialMT nfIUFDTN+ArialMT*1 [36 0 0 -36 0 0 ]msf42.7852 462.411 mo(AP)[24.0123 0 ]xsh301 585 mo
382 585 li
382 638 li
301 638 li
cp
1 1 1 rgb
f
0 gry
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginIUFDTN+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C37295284C077711C162623860AACA404F650F8D516970257> |-/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE112857894FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619ADD420F549AB7C795751D32E8EE6> |-/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD96538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB3287CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B8435558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F4172D53C8FCAF4D28F2B78D3A4BF03> |-/u <1C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F517D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA8F992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE38793990906DA8D7F8ACFF6D70790F06B02> |-systemdict /gcheck known {setglobal} if end {end} ifendIUFDTN+ArialMT /Encoding getdup 101 /e putdup 114 /r putdup 115 /s putdup 117 /u putpop%ADOEndSubsetFont
/IUFDTN+ArialMT*1 [65{/.notdef}rp /A 14{/.notdef}rp /P 20{/.notdef}rp /e 12{/.notdef}rp /r /s /.notdef /u 138{/.notdef}rp]IUFDTN+ArialMT nfIUFDTN+ArialMT*1 [36 0 0 -36 0 0 ]msf306.484 623.411 mo(user)[20.016 18 20.016 0 ]xsh665 553 mo
736 553 li
736 606 li
665 606 li
cp
1 1 1 rgb
f
0 gry
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginIUFDTN+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/I <1C60D8A8C9B854D0F463D3892D665712D6B7D6A81E> |-/R <1C60D8A8C9B6079F62E89B521DCDBE3DC5497B8DD99916239C0DFA5ED4F632B33575F4260343AF5DB7D477D12055F49C5E99C0AC176EAD42723223937F2BA15ECAD7751CB6A136B700EE485E38E7CDB87D9465C90BB8E29B04FDDA42609FBC3833B9FB5105619F4CC434003085F449D9FD5022725306B331FB97B31D295257B180DE1FD5465D256CCA19301DA97326882845130A5257BF61307ABA64C3F0B222> |-/S <1C60D8A8C9B64EDFE3D078722A65C31955939D63AA5C8A4945719B5E558E3B73A676CC12D1E18D93A8DC67C074D6E352D426981DE76F8EC4CFE5DAE051BE47753A7C234C4B8D7D9F50292A61882B5500CC701F878FE626CDC6D4C322BB391537921D673F5AEE3EC19E36E7EFEC0F06A0EA4EAAB6BBA94DDCD11A6A564B13B510F8C915848233B82F046D854DCD4F1639F149305DC73D3C68DF8AEB47A96A30E55CF8BAD07FA2825BCE0D675F1CC2EBE61B07B772130E23119250F1EBF8FE12A2098D9F09F3F21BDC41666CA4A0BB70D5F0A750B44BB93A5FBFDD2BF8DE450B277265536F77D5BD6F44FB72FF2E708C60107653AE44BFFB26AFF8> |-systemdict /gcheck known {setglobal} if end {end} ifendIUFDTN+ArialMT /Encoding getdup 73 /I putdup 82 /R putdup 83 /S putpop%ADOEndSubsetFont
/IUFDTN+ArialMT*1 [65{/.notdef}rp /A 7{/.notdef}rp /I 6{/.notdef}rp /P /.notdef /R /S 17{/.notdef}rp /e 12{/.notdef}rp /r /s /.notdef /u 138{/.notdef}rp]IUFDTN+ArialMT nfIUFDTN+ArialMT*1 [36 0 0 -36 0 0 ]msf670.494 591.411 mo(IRS)[10.0008 25.9848 0 ]xshgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 /2 ]]
[/Pattern [/-1128235320.0 /-1128235040.0 /-1128234760.0 /-1128234480.0 /-1145526216.0 ]]
] del_res
/IUFDTM+Calibri*1 uf/IUFDTM+Calibri uf/KAAAAA+Calibri uf/IUFDTN+ArialMT*1 uf/IUFDTN+ArialMT uf/PBAAAA+ArialMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
